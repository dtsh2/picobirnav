%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: cophy_pico.pdf
%%Creator: Adobe Acrobat 17.12.0
%%For: dtshayma
%%CreationDate: 2/11/2017, 5:33:50 p.m.
%%BoundingBox: 0 0 504 504
%%HiResBoundingBox: 0 0 504 504
%%CropBox: 0 0 504 504
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 692 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-06-21T17:07:31"
   xmp:CreatorTool="R"
   xmp:ModifyDate="2017-06-21T17:07:31"
   pdf:Producer="R 3.3.1"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">R Graphics Output</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -504 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 504 li
504 504 li
504 0 li
cp
clp
gsave
1.44 502.56 mo
502.56 502.56 li
502.56 1.44 li
1.44 1.44 li
cp
clp
.75 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
20 484 mo
27.09 484 li
false sop
.750179 .679652 .670192 .901488 cmyk
@
20 462.91 mo
25.69 462.91 li
@
20 381.92 mo
47.24 381.92 li
@
47.24 431.27 mo
72.03 431.27 li
@
72.03 441.82 mo
93.28 441.82 li
@
72.03 420.73 mo
103.31 420.73 li
@
47.24 332.57 mo
69.08 332.57 li
@
69.08 399.64 mo
117.49 399.64 li
@
69.08 265.51 mo
139.28 265.51 li
@
139.28 378.55 mo
139.34 378.55 li
@
139.28 152.48 mo
156.11 152.48 li
@
156.11 236.18 mo
156.84 236.18 li
@
156.84 315.27 mo
157.82 315.27 li
@
157.82 346.91 mo
159.54 346.91 li
@
159.54 357.45 mo
169.68 357.45 li
@
159.54 336.36 mo
174.05 336.36 li
@
157.82 283.64 mo
158.48 283.64 li
@
158.48 315.27 mo
163.01 315.27 li
@
158.48 252 mo
159.25 252 li
@
159.25 283.64 mo
161.99 283.64 li
@
161.99 294.18 mo
164.01 294.18 li
@
161.99 273.09 mo
172.84 273.09 li
@
159.25 220.36 mo
162.97 220.36 li
@
162.97 241.45 mo
166.65 241.45 li
@
166.65 252 mo
172.16 252 li
@
166.65 230.91 mo
194.27 230.91 li
@
162.97 199.27 mo
167.83 199.27 li
@
167.83 209.82 mo
175.43 209.82 li
@
167.83 188.73 mo
174.85 188.73 li
@
156.84 157.09 mo
162.11 157.09 li
@
162.11 167.64 mo
188.21 167.64 li
@
162.11 146.55 mo
171.05 146.55 li
@
156.11 68.77 mo
157.1 68.77 li
@
157.1 107 mo
159.65 107 li
@
159.65 125.45 mo
166.79 125.45 li
@
159.65 88.55 mo
162.18 88.55 li
@
162.18 104.36 mo
171.53 104.36 li
@
162.18 72.73 mo
164.59 72.73 li
@
164.59 83.27 mo
177.09 83.27 li
@
164.59 62.18 mo
171.61 62.18 li
@
157.1 30.55 mo
160.97 30.55 li
@
160.97 41.09 mo
170.76 41.09 li
@
160.97 20 mo
168.05 20 li
@
20 484 mo
20 462.91 li
20 381.92 li
@
47.24 431.27 mo
47.24 332.57 li
@
72.03 441.82 mo
72.03 420.73 li
@
69.08 399.64 mo
69.08 265.51 li
@
139.28 378.55 mo
139.28 152.48 li
@
156.11 236.18 mo
156.11 68.77 li
@
156.84 315.27 mo
156.84 157.09 li
@
157.82 346.91 mo
157.82 283.64 li
@
159.54 357.45 mo
159.54 336.36 li
@
158.48 315.27 mo
158.48 252 li
@
159.25 283.64 mo
159.25 220.36 li
@
161.99 294.18 mo
161.99 273.09 li
@
162.97 241.45 mo
162.97 199.27 li
@
166.65 252 mo
166.65 230.91 li
@
167.83 209.82 mo
167.83 188.73 li
@
162.11 167.64 mo
162.11 146.55 li
@
157.1 107 mo
157.1 30.55 li
@
159.65 125.45 mo
159.65 88.55 li
@
162.18 104.36 mo
162.18 72.73 li
@
164.59 83.27 mo
164.59 62.18 li
@
160.97 41.09 mo
160.97 20 li
@
1 lc
[0 3 ] 0 dsh
27.09 484 mo
215.02 484 li
@
%ADOBeginSubsetFont: AdobePiStd Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /AdobePiStd def
/FontInfo 7 dict dup begin
/Notice (Copyright 2002 Adobe Systems Incorporated. All rights reserved. Adobe is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /uni25CF put
def
/FontBBox {0 -196 1276 826} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 725 750 500 525] def
/StdHW [50] def
/StdVW [50] def
/StemSnapH [50] def
/StemSnapV [50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/uni25CF <1C60D8A8C9B6CAC20393B820A953E6ED15C444D2FC84BF4B10D0B3
0839933397D3264466EBB484089E8F13950BA5D9693EB673B9697E5F3B360819> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/AYCWKX+AdobePiStd /AdobePiStd findfont ct_VMDictPut
/AYCWKX+AdobePiStd*1 
[127{/.notdef}rp /uni25CF 128{/.notdef}rp]
AYCWKX+AdobePiStd nf
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
25.01 485.82 mo
(\177)sh
25.69 462.91 mo
215.02 462.91 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
23.62 464.73 mo
(\177)sh
93.28 441.82 mo
214.36 441.82 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
91.2 443.63 mo
(\177)sh
103.31 420.73 mo
214.36 420.73 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
101.23 422.54 mo
(\177)sh
117.49 399.64 mo
215.02 399.64 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
115.42 401.45 mo
(\177)sh
139.34 378.55 mo
215.7 378.55 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
137.26 380.36 mo
(\177)sh
169.68 357.45 mo
213.69 357.45 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
167.61 359.27 mo
(\177)sh
174.05 336.36 mo
215.02 336.36 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
171.97 338.18 mo
(\177)sh
163.01 315.27 mo
213.69 315.27 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
160.94 317.09 mo
(\177)sh
164.01 294.18 mo
214.36 294.18 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
161.94 296 mo
(\177)sh
172.84 273.09 mo
215.02 273.09 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
170.76 274.91 mo
(\177)sh
172.16 252 mo
211.7 252 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
170.09 253.82 mo
(\177)sh
194.27 230.91 mo
215.02 230.91 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
192.2 232.73 mo
(\177)sh
175.43 209.82 mo
214.36 209.82 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
173.36 211.63 mo
(\177)sh
174.85 188.73 mo
215.7 188.73 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
172.78 190.54 mo
(\177)sh
188.21 167.64 mo
214.36 167.64 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
186.13 169.45 mo
(\177)sh
171.05 146.55 mo
213.03 146.55 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
168.97 148.36 mo
(\177)sh
166.79 125.45 mo
219.69 125.45 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
164.72 127.27 mo
(\177)sh
171.53 104.36 mo
217.03 104.36 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
169.45 106.18 mo
(\177)sh
177.09 83.27 mo
216.36 83.27 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
175.02 85.09 mo
(\177)sh
171.61 62.18 mo
215.02 62.18 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
169.54 64 mo
(\177)sh
170.76 41.09 mo
213.69 41.09 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
168.68 42.91 mo
(\177)sh
168.05 20 mo
214.36 20 li
@
AYCWKX+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
165.98 21.82 mo
(\177)sh
%ADOBeginSubsetFont: Arial-ItalicMT Initial
ct_T42Dict begin
-0.516 -0.324 1.355 0.996
 256 array 0 1 255 {1 index exch /.notdef put} for  /Arial-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32efe77db1000000cc000000606376
74203de628370000012c000005606670676d54bf6d360000068c000005ce
676c79660e92094d000070fc0005af0c68656164daab66ef00000c5c0000
0036686865610e470d6300000c9400000024686d74786991277800000cb8
000027e06c6f63611c63139c00003498000027e46d6178700d2403ce0000
5c7c000000206e616d65815f997c00005c9c00000db77072657048530f70
00006a54000006a667646972000000000000000000000000000203880190
00050008059a0533001e011b059a0533005a03d1006602120805020b0604
020202090204e0000aff000078430000000100000000544d432000010020
fffc05d3fe570133073e01b2400001bfdff70000042605ba000000200004
05ba001905ba001905a6001a042600180000ffe70000ffe80000ffe7fe69
ffee05ba0019fe6fffe202e2000000b5000000b5000000000000000000bc
00bf008c00b300a600a600b10010010400640079008b008b00c100ea008a
00a2009101b40073007a00a400a200bb01bd0270005a00800017007000c3
00300103ffd000ac007d010d0006001200c900cd00560091ff8f0113000b
00190043007200b903c803d7ffee0146016e0002001b0044005200b603ee
00d80104023d05180573ff2d0005000900c600cd024cffe7001100150037
0049004e005c00a600a700b500c500db01280543ffdf0021004000530070
0079008e00a300ca018f0265027502a403c80555ff9affd7ffee00050008
002600460069007000730077009a00c100ef010a011301c101e50318049c
fef2fef9ffa4000000270034004100450075008000c400cb00d900e500f8
01550166022b0254037004050467ff16ffb40002001d0032004a004a004d
00550060007c007f008c009d00b102a3038cfec4fef7000100030003002d
00370037003a0056005a00a400cd00da0111011901250127014801530169
01a001fb02070239028102a402f7030503280328033603a303b503dd03df
03f10448047804e6060bff28ff4bff68ff78ff9fffbfffe10012001f0028
004c005a005c005e00610070007700810083008800b1009c009c009d009f
00a500b600b800b900ba00d300df00e100f200f7010e0132013b013c0166
016c017801ae01b501b701cf01d2025d026102a202cd0323035a03a303a4
040004440450047304d2fe00fe38fe8cfeb1feceff0effb2ffc7ffecfffd
0005001f002100250026002d00580065008100850091009900a500ab00af
00b000b000ba00db00dc00e900f80109010901100114011701240129012d
012f013601500151015a0167017401790182018e01900199019c01b001b3
01b701be01c501da01e801f001f201fb02000200020b020f021f0222022c
022d022e024e02670287029002ac02b502bc02bc02d002d402d802db02e5
02f102f9031103140314032203260348034a035c036f03780379037e03ab
03b503cb03e004040405040f0428042c048404a504af04cf04eb04f9050b
058e0593059805e505e506000610063d06500668069506b806d907030751
0766077e077f078207b60800082308ac00b200bf00b100af000000000000
000000000000025c00a100d301be00de01a6031402ab015002a70196010e
0318006b039b01d1054b0089023c02b0014d021603f301760176001503a9
01f400f400b6020402d8012b04a701a000bc01bd028c026b0278040f0157
04a904fd017404d2040302e400a602ee00000000061404a7000002760000
016d013e00000267006d009e021400cb02a40085007100c2009e06090290
00b9008f00260248003501490091009902ef00eb008e0011013f006a0079
00fd01a3057402a1017a03e8020c005601fd02df013b0574006606100081
01b3024e03cb01e400cd02bc0132014b01680239016200fd00e601a201e6
0255004d028300a3046705d401dd012b014e05680070000004e003490366
021302bb0000000000000000000000000000000000af00b4000300cd004c
03c8005c0192007200cd022b0049026f009d03bd01e900b4017c04670368
0099027802040183028102ac00b30348040b004200b403b400be01a803d6
012b00af0478016e0193ff45fd5d00f506a604ae03b10536041cffcafedc
01a501d0ffba02f10037ffca0355fe67019c04190055007c00e50072006d
000b00ab012b009c00db01a60008012b00250056008e00a5001500100109
00cb00460017004c005e01f200b80083001101360128004e0222006b0241
072006140000072700aaff370037006e002901da04a8007500ba40415440
3f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b0042651582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01182f
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
3623701020b802364520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab902a502a58a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b202020243604259b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b2021002436042595959592d0000000100000005147b1efab89e5f0f3cf5
0819080000000000a372c2bf00000000c94a4554fbddfd670adf07fb0002
0009000100010000000000010000073efe4e00430aaafbddfa520adf0021
000700000000000000000000000009f80600010000000000023900000239
00000239007302d701150473005f04730069071d00c7055600a101870104
02aa00ad02aaff93031d00ec04ac00b80239003102aa005f023900760239
ff98047300910473012f04730078047300700473005d0473008e047300ab
047300f8047300990473008a023900750239003104ac00b804ac00b804ac
00b804730104081f006f0556ffd70556005905c700ba05c7005b0556005c
04e3005d063900c705c7005602390075040000440556005b0473005206aa
005a05c70064063900bb05560058063900bd05c700600556009004e300ff
05c700c6055600fe078d01000556ffbf055600ef04e300320239000d0239
00ae0239ff8803c100900473ff7e02aa012a0473005a0473004404000073
0473006c0473006a0239005d047300350473004401c7003d01c7ff080400
004601c7003606aa004304730044047300640473ffeb0473006902aa0044
0400004e0239007304730080040000a205c7009f0400fffd040000000400
002802ac006b021400bc02acff5404ac00a40556ffd70556ffd705c700ba
0556005c05c70064063900bb05c700c60473005a0473005a0473005a0473
005a0473005a0473005a040000730473006a0473006a0473006a0473006a
0239007d0239007d0239007d0239007d0473004404730064047300640473
0064047300640473006404730080047300800473008004730080047300ba
033301110473009a047300400473003e02cd006d044c008e04e3004a05e5
005305e500530800011802aa015a02aa00ed0464007c0800ffad063900ae
05b4009a0464007c0464007c0464007c0473004b049c000c03f4003805b4
007a069600f1046400000231000002f600a702ec008f062500bb071d0057
04e3009904e300ac02aa007604ac00b8046400540473002e0464007c04e5
001a047300a104730053080001260556ffd70556ffd7063900bb080000a4
078d00810473fffc0800000002aa00d802aa00d601c7010801c701000464
008003f4007804000000055600ef0156fde80473005102aa006102aa0021
0400006f0400006f0473000b023900b901c7fff102aaffd8080000880556
ffd70556005c0556ffd70556005c0556005c023900750239007502390075
02390075063900bb063900bb063900bb05c700c605c700c605c700c60239
007d02aa00cd02aa00c002aa00c902aa00db02aa018e02aa014802aa004d
02aa00b002aa004002aa01080473001801c70026055600900400004e04e3
003204000028021400bc05c7005b04730064055600ef0400000005560058
0473ffeb04ac00b804ac010502aa011702aa009802aa00a906ac007b06ac
00ab06ac00a90473ffe8063900c70473003502390075055600900400004e
05c700ba0400007305c700ba040000730473006c046b00b502aa01360556
ffd70473005a0556ffd70473005a05c7005b0500007005c7005b0556005c
0473006a0556005c0473006a0473005201c7003604730052024000380473
00520333003605c700640473004405c7006404730044063900bb04730064
05c7006002aa004405c7006002aa0044055600900400004e04e300ff0239
001b04e300ff02d5006d05c700c60473008005c700c60473008004e30032
0400002804e300320400002804900057063900bb06b200b4049000660472
00620384004504d3006402fe00b00538006f046bff7e0400007302eb0077
08c000190800004f040000990800004f040000990800004f040000980400
009807d5016a05c000ee04ac00b804d5009d04ac007104d5022204d50105
05abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e05ab
ffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905ab02d6
05ab006605abffea05d5ffff04d500920800000007eb013007eb012007eb
013007eb012004d500b204d5008004d5002a082b0198086b01b807550010
060000f40600006f0440003a0540003704c0003f04150040040000250600
005505de0075038d003b04eb00650180010402d50115071500b802960019
04d5009202d6008302d6008304d500b202d600700556ffd70473005a05c7
00ba0400007305c700ba040000730556005c0473006a0556005c0473006a
0556005c0473006a063900c704730035063900c704730035063900c70473
003505c700560473004405c70056047300440239007501c7003d02390075
01c7003d0239007501c7003d0239ffdc01c7ff960400004401c7ff080556
005b04000046040000460473005201c7ff6e05c700640473004405c90062
04730049063900bb04730064063900bb0473006405c7006002aaffc70556
00900400004e04e300ec0239001805c700c60473008005c700c604730080
05c700c60473008005c700c604730080078d010005c7009f055600ef0400
000001c700360556ffd70473005a0800ffad071d0057063900ae04e30099
02390128078d010005c7009f078d010005c7009f078d010005c7009f0556
00ef0400000001c7013302aa00990473004004cd005a06ac007b06ac0094
06ac009306ac006302aa002602aaffe002aa017b02aa00610556ffd4064f
006306c50068031c0062065a005706ec00600633001b01c7ffee0556ffd7
05560059055effec0556005c04e3003205c70056023900750556005b0556
ffec06aa005a05c7006405300008063900bb05cc00570556005804cc002d
04e300ff055600ef0556ffbf06a500fd0616000702390075055600ef0490
0066038400450471004501c7003d046600960492ffe90400009e03b50064
047100450457008201c7003d0400003c03f0ffcd0462ffe8040000a20393
0073047300640495ffe403e4006f04660096045eff6d05d2009c063b0064
01c7003d046600960473006404660096063b00640556005c06be00e7045a
005705a900bb055600900239007502390075040000440887ffea07dc0057
06c100e504b70057051d00e705ca00570556ffd70535005705560059045a
005705a2ff7f0556005c0756ffb704e9006305b9005705b9005704b70057
057cffeb06aa005a05c70056063900bb05cc00570556005805c700ba04e3
00ff051d00e7065c00a40556ffbf05d10057056300db075d005707620057
067100e70717005705350057058d005a082e00570574ffca0473005a0480
0076042d006403f2004e046c00640473006a0581ffc503b8001f04730080
0473008003c7003f0483ffd8057c003f0467003f047300640467003f0473
ffeb0400007306aa00430400000006af005f0400fffd0493007d04240097
06a4007906cf007904f8007905e3003f0435003f03ef00350604003f0446
ffe80473006a047300450306003f03f700610400004e01c7003d01c7003d
01c7ff080748ffd8069f003f0473004503c7003f040000000473007d03f0
005702b7003f0800005108aa005b055c00ac0000003f0000ff930000ffa2
0000ffa2000000760000fff30000fff30000fffd0000fffd000001c00000
ff850000012e00000053031000f10000014a02330082000003ca0000ffc3
0239006d0481001d0456ffe60331ffcd041100a104d1005601f9004f030f
00b304ca004f04b8008b01f900bc041300a903b0000703b400b004ca004f
04cf002301f9fff802d2fff00498006c043cffd30488009c045f003303b1
00af03d4fff304660003041300a9058e00a20524ffe103f2004f03f200bc
03f200bc01e3009e0356009e0686004f01f9009b041300a90413007003b4
001703b400170448ffe1058e00a2058e00a2058e00a2058e00a20481001d
0481001d0481001d0456ffe60331ffcd041100a104d10056024b002d034a
003904b8008b024b004e041300a903b0000703b400b004cf002302d2fff0
0498006c0488009a045f003303d4fff304660003041300a9058e00a20524
ffe101f9004f0456ffe603b00007045f0033049b00370000ffdc0000ff25
0000ffdc0000fe510000ffdc0000fe510000ff160000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ffdc0000ff16
0000ffdc0000ff200000ffdc047300a408000000067e00bb04d600640659
00c6051200800000fef40000fd410000fdb70000ff580000fdec0000fe3b
0000ff2e0000ff380000fe090000fd760000feb30000fd0e0000fd660000
ffec0000ffc40000fe44041b005606ac007b06ac007b0000ff6a0000fdb8
0000feca0000fdc80000ff2d0000fdc70000fced0000fc0e0000fc0e0000
fd140000fc910000fc7c0000fc920000fc460000fc000000fc460000fbdd
0000fef40000ff500000fe7e0000fc6a0000fc950000fdf70000fe330000
fc990000fcf90000fcef0000fc9f0000fc8b0000fbde0000fd2c0000fd4b
0000fc780000fc6801c7003d0556ffd70473005a0556ffd70473005a0556
ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473005a
0556ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473
005a0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c
0473006a0556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a0556005c0473006a0239007501c7003d
0239003801c7ffe8063900bb04730064063900bb04730064063900bb0473
0064063900bb04730064063900bb04730064063900bb04730064063900bb
04730064067e00bb04d60064067e00bb04d60064067e00bb04d60064067e
00bb04d60064067e00bb04d6006405c700c60473008005c700c604730080
065900c605120080065900c605120080065900c605120080065900c60512
0080065900c605120080055600ef04000000055600ef04000000055600ef
040000000556ffd70473005a0239007501c7003d063900bb0473006405c7
00c60473008005c700c60473008005c700c60473008005c700c604730080
05c700c60473008000000030000000300000003000000030045a003e0306
003c0756ffb70581ffc504b7005703c7003f04b7005703c7003f05c70056
0467003f047300ea040000a2047300870400fff40556ffbf0400fffd0563
00c6042400810563007504730044063900c104730076063900bb04730064
01f900a10000000002bc000003f2008c0473004405d8008c053500570473
0044053500570473004405c700a005c700ba0400007305c7005b0646008c
0535003b0473006c047200000556004404e9006604e3ff2a063900c703f9
00890709004401c70036023900620556005b0400004601c7003603f0ffcd
06c5007005c7ff3004730044063900bb06f200bb0557006405d8008c0473
ffeb05560058055600820400005704cc002d02aa00c80239ffe404e300a0
0239007304e300ff061600bf05c700c605bd00d10400000004e300320400
002804e3ffba04e30033040000110400fffa04730078041500490381000a
0400006b0473ffeb021400bc034e00bc04ac0072023900730aaa005b09c7
005b0873006c08730052063a0052038e003609c70064078e0064063a0044
047300760556ffd70473005a0000fff90556ffd70473005a0800ffad071d
0057063900c704730006063900c7047300350556005b04000046063900bb
04730064063900bb0473006404e3ffba0400ffae01c7ff080aaa005b09c7
005b0873006c063900c7047300350846005604f1000405c7006404730044
0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c0473
006a0239007502390036023900750239007d063900bb04730064063900bb
0473006405c7006002aa004405c7006002aa004405c700c60473008005c7
00c604730080055600900400004e04e300ff02390061045cffd6037effb5
05c7005604730044055a005604d6006404d6006404e30032040000280556
ffd70473005a0556005c0473006a063900bb0473006400000035063900bb
04730064063900bb04730064063900bb04730064055600ef040000000473
00880473006c04730044047300440400003c040000100473006c0473006c
0473007105a200760384004503b8001f04ed001f041200640239ff380473
00350473003504670064040200a604ef007c0473007c0473004404730044
01c7001f01c7003e02d9000001c7ffcf01c7fff001c700070482003006aa
006d06aa006d06aa00430473ff100473004404a9003f0473006406200064
063b00640473006402aaffb002aaffb002aaffb002aaffed02aa001502aa
004402aa007504460044044600410400ffd70253ff380271ff3802510059
02c8ff330239002b0239001c047300420481005b046600960400ffd305c7
ffd30400ffdd041e009504000028046100280400ffae0400ffcc040000ca
040000c70400003704000023063900bb0418004404120059046700640467
003f0258ff1f0400ffd703950044047300690400003d04000083076b006c
073e006c07c7006c055e007603b0007305ab00730602005d0522003604bf
003603e20064043800130277003a0277003a00faffa201c1003a01c1001e
01c10027029d003a041400d302c9004f0187010402d7011501c7010801c7
010001c7013302aa01c002aa01ad02d900de02d900d504ac00b804ac00b8
04ac00ad04ac00ad02aa01d902aa015a02aa012a02aa012102aaff9502aa
005e02aafffb023900700239015202aa00fb02aa00fb02aa00a602aa00a6
02aa00a602aa001002aa000202aa00a202eb00d600be00400299006302b1
004002d900d5031000960310009603100096031000960310009602aa0062
02aa006202aaffc702aa00c902aa00d60457009604570096045700960457
00960457004304570043045700430457004304570043031000430457002f
0457002f0457002f0457002f0457002f0310002f04570025045700250457
002504570025045700250310002f0457001a0457001a0457001a0457001a
0457001a0310001a04570042045700420457004204570042045700420310
004204570096045700960457009604570096045700420457004204570042
0457004204570042031000420457002f0457002f0457002f0457002f0457
002f0310002f0457002f0457002f0457002f0457002f0457002f0310002f
045700260457002604570026045700260457002603100026045700420457
004204570042045700420457004203100042045700960457009604570096
045700960457004204570042045700420457004204570042031000420457
002604570026045700260457002604570026031000260457002304570023
045700230457002304570023031000230457002f0457002f0457002f0457
002f0457002f0310002f0457004b0457004b0457004b0457004b0457004b
0310004b0457009604570096045700960457009604570042045700420457
00420457004204570042031000420457001a0457001a0457001a0457001a
0457001a0310001a04570024045700240457002404570024045700240310
00240457002f0457002f0457002f0457002f0457002f0310002f0457004e
0457004e0457004e0457004e0457004e0310004e04570096045700960457
0096045700960000ff780000ff6a0000fea20000ffb30000003f0000ff9b
000000150000ffac0000ffd000000091000000250000ff140000ffb30000
ffb3000000200000001100000045000000df0000fedc0000fea70000fee2
0000fef00000ff7d0000ffbb0000ff2c0000feec0000fee90000fee30000
fe400000fe1b0000ff210000fe460000fec60000fee70000fe9b0000fef5
0000ff630000fe210000fe500000fe690000fe260000fe640000fe640000
fe190000fe400000fd1b0000fe5d0000fe950000fea90000fd980000fe16
0000fe620000ff2c0000fe210000fedb0000fe3a0000ffca000000540000
fe6d000000100000ffe70000ff6f0000000d0000ff160000fefb0000ff26
0000fd8d0000feea0000fee70000ff6f0000ff6f0000ff6f0000fe980000
fedf0000fd1f0000ff310000ff2b0000ff530000ff000000ff010000ffc9
0000fef10000ff0e0000ff1d0000ff130000fee10000fe210000ff400000
ffce0000ff4c0000fed002aa015a02aaffe902aa004f040a00430466003c
05ba00ef070e007c05ba00ef04730064063b00640482ffd3063900bb0473
006405c700c80400003704e3005d0306ffe904ff006a043c0056060d00b4
049d00f506c5ffe406aaffe1056300dc047300b20563002b0419ffc80556
00820556008204e0007d04c5008805f700bb046e00640352003302de0045
0482ffd304a200640400007301c7ff08063900bb03870064038700110556
005c05b900570473006a047300800a6a00bb04c2006106140044063b0044
07390043058e00440558ffa50400ffbd070600420572004306a1001d057b
00430831004306d9004404e9004903b8fffd06a5011a05d200c5063900bb
04730064061400fe04b800a2061400fe04b800a208de00bb07590064069f
005004cc001e0a4200bb070200640000feca0a6a00bb04c2006105c700ba
04000073047300390000ff5a0000ff5800000050000000320000fc2b0000
fc4c05b9005704730080053500570435003f055600580473ffeb0528004b
0434004404e9006303b8001f04b7005703c7003f05f100e7048a00790721
0056059b003f08b3005706b7003f05c7008b0400005105c700ba0400006c
04e300ff06aa0043072e00e7052900b0056300db0424009706cd00400514
001f06cd00400514001f023900750756ffb70581ffc50504004b0428002a
057cffeb0483ffd805c7004b0467002a05c700560467003f056300db0424
009706aa005a057c003f02aa00db0556ffd70473005a0556ffd70473005a
0800ffad071d00570556005c0473006a063900c1047300760756ffb70581
ffc504e9006303b8001f04e900630400ffae05b900570473008005b90057
04730080063900bb04730064063900bb04730064058d005a03ef0035051d
00e704000000051d00e704000000051d00e704000000056300db04240097
0717005705e3003f055600490473006c079d004906ab006c077f0108061c
00b804e9010803b800b807d8ffeb06c4ffd8081a005606a5003f063900c7
0467006405dc00ff08ea00430000fec30000ff7900000033000000700000
fffb0000feb9000000320000ffd40000ff7c0000ff700000feb2000000b0
000001360000ff6e0000fe6c000000de0000003d0000fee50000feec0000
feb40000fde20000fef5000000100000fec70000fece0000001d00000021
0000ff7a0000fe9500000041000001ac0000003000000030000000060000
00060000009400000074000000300556ffd70473005a0556005904730044
0556005904730044055600590473004405c700ba0400007305c7005b0473
006c05c7005b0473006c05c7005b0473005f05c7005b0473006c05c7005b
047300560556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a04e3005d0239005d063900c704730035
05c700560473004405c700560473004405c700560473004405c7fffd0473
fff305c70056047300440239ff4501c7fef5023900750239007d0556005b
040000460556005b040000460556005b040000460473005201c7ffe80473
005201c7ffe80473005201c7ff220473005201c7feff06aa005a06aa0043
06aa005a06aa004306aa005a06aa004305c700640473004405c700640473
004405c700640473004405c7006404730044063900bb04730064063900bb
04730064063900bb04730064063900bb04730064055600580473ffeb0556
00580473ffeb05c7006002aa004405c7006002aafff205c7006002aafff2
05c7006002aaff39055600900400004e055600900400004e055600900400
004e055600900400004e055600900400004e04e300ff0239007304e300ff
0239003804e300c90239ffa804e300ae0239ff7005c700c60473008005c7
00c60473007d05c700c60473008005c700c60473008005c700c604730080
055600fe040000a2055600fe040000a2078d010005c7009f078d010005c7
009f0556ffbf0400fffd0556ffbf0400fffd055600ef0400000004e30032
0400002804e300320400002804e3003204000028047300440239007305c7
009f040000000473005a01c7003604900066049000660490006604900066
049000660490006604900066049000660556ffd70556ffd7068200b80682
00d2068200b8068200d2068200e3068200e3038400450384004503840045
038400450384004503840045061e0082061e00ab07ae00a507ae00bf07ae
00a507ae00bf047100450471004504710045047100450471004504710045
0471004504710045068f0082068f00ab081f00a5081f00bf081f00a5081f
00bf081f00d0081f00d001c7003d01c7003d01c7003d01c7003d01c7003d
01c7003d01c7003d01c7003d03010082030100ab049100a5049100bf0491
00a5049100bf049100d0049100d004730064047300640473006404730064
0473006404730064069d0082069d00ab082d00a5082d00bf07c900a507c9
00bf04660096046600960466009604660096046600960466009604660096
04660096068200ab07ae00bf081200bf07ae00e3063b0064063b0064063b
0064063b0064063b0064063b0064063b0064063b0064067a006b067a006b
080a00a5080a00bf07a600a507a600bf07a600dc07a600dc049000660490
00660384004503840045047100450471004501c7003d01c7003d04730064
047300640466009604660096063b0064063b006404900066049000660490
006604900066049000660490006604900066049000660556ffd70556ffd7
068200b8068200d2068200b8068200d2068200e3068200e30471ffeb0471
ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb068f0082
068f00ab081f00a5081f00bf081f00a5081f00bf081f00d0081f00d0063b
0064063b0064063b0064063b0064063b0064063b0064063b0064063b0064
067a006b067a006b080a00a5080a00bf07a600a507a600bf07a600dc07a6
00dc04900066049000660490006604900066049000660490006604900066
0556ffd70556ffd70556ffd70556ffd70556ffd702aa016702aa004f02aa
016702aa00c002aa00ed0471ffeb0471ffeb0471ffeb047100450471ffeb
068200d10682007c06f300d106f3007c05c7005602aa00b802aa00b802aa
00e301c7003d01c7003d01c7003d01c7003d01c7003d01c7003d02390075
02390075036500d10365007c02aa00d202aa00d202aa00e3046600960466
009604660096046600960495ffe40495ffe40466009604660096055600ef
055600ef068200a906e6007c061e00ab02aa006102aa006102aa012a063b
0064063b0064063b0064063b0064063b0064076500d1069d007c074200d1
067a006b0616000702aa015a02aa01900473006105c7008f05c700ba06aa
004305c70043090a0060078d002f0556005b04e300a30800ffd70400ffd3
04c100660000ff2b0000ff610000ff320000ff4401c7001f01c7ff08042b
ffa1055600580506006c025aff1f0508004402c8ff8d0555007505550075
02aa001e02aa001e02aa005002aa005002aa003002aa00ac02aafffe02aa
ffce02aaff7b023900b702aa018602aa018602aa002602aa0026032effbe
032effbc02aaffc80000003b0000004a0000ff910000fec20000fefb0000
fefb0000fe410000004a0000ff7b0000ff530000fea2055600580473ffeb
03ffffd205bcff9e071d00570401004004000073047100440471002903c5
004403b8001f01c7ffd6035000150400003c03950022057c003f04b0003f
047300640400003c047300300400fff704e3001c078d008103a8003c0473
006e04730064044800440446ffe804460044041d00cb0466009604730020
0595002304730020040000a205c7009f0400002803b8001f03b8005704db
fff80306003f0400ffd30467003f0448004405d200d40483ffd803ee005d
05bd004803a1007a03a1007a03d0007a039d007a039d007a03eb00a203cf
007a0149007a02ac007a0399007a0302007a046f007a03c9007a03cb007a
03f900a2030f008a0381007a03a7007a032c00de038d00a3052000ea02de
006e02de009602d400ab04bd009f027e003a032c00ab031900ab031900ab
0250007c025000600322008300ff00250286003a03ff003a0275003a0328
00ab02d7008d032800a7032800b302ef0014019000a202d4008f03bc00d0
0435007802dc00cc0388006e0330002802f000da030c00a203810099030c
fffb00ffffe20187ffb002d4000c02dc00510330ffb702f0005e0309ffe9
03810012030cff7305ad001d053d00a105fd005604dc000704e000b005f6
004f053f00a90650ffe104ac00670000fd850000fddb0000fde30473fffc
02aa00ec02d5006e0400000008000000040000000800000002ab00000200
0000015500000473000002390000019a000000ab00000000000005e50053
05c700ba06aa0052057cffea074d00800711006c070c00690556ffd705c7
005f0400ff860473003d04e3ffc1040000600400002604a500c600000102
0000fee50000fe590000000b0000ff530495ff8f05c700a005c700ba05c7
00a0045a00570306003f0000fece0000ffc30000ff4202d200240000fee1
047300440473006c0239ffd006aaffd00473ffb80473ff1c02aaffa002aa
ffa00400004e0239ffc0040000280473ffef030b007a047400050618ffe2
01c7001f01c7001f0473ffeb0466003f04810021047300440473006c0239
ff83058200350400004601c7ff5b06aa0043047300440473ffeb02aaff6f
0400004e0318ff38040000a20400fffd040000280473005a0473006c0473
006c0473006a0384004503b8ffb30514007601c7003d0400ffcb0253ff56
04730080045cffe40309008002da00a702da0068032900a60250006001a5
009701a5ffea0322008302d600b400ff004b00ff006200ff006200ff004b
01e1000400ff003e00ffffce026d006403ff003e03ff005a0275ff6f0275
003902d20052032800b1032800a802c000370187ffe30190004802750038
033700ac027500730275007102dc0047029f004c029f004c02f0004c02bc
002b032900b70000ff6d0000ff8e0000ff0a0000ff830239006f02de000f
0319003103280030030c000b03190023063900c70556ffd70556005805c7
00ba02aa0012049000660490006604900066049000660490006604900066
049000660490006601c7003d01c7003d01c7003d01c7003d01c7003d01c7
003d01c7003d01c7003d0466009604660096046600960466009604660096
04660096046600960466009601c7003d01c7003d01c7003d01c7003d0466
009604660096046600960466009603a0007b0556001f05c700780556ffec
0556005a0473ff860400004401c7ff08060a00bb0473006905c7000c02aa
00330556009f040000000400003c040000730400003c01c70036045aff83
0306ff610556ffbf0400fffd0556ffbf0400fffd04e9006603840045057c
ffd504abffd80000ff5d0000ff9f0000ff980000ffc70000ff2a0000ff27
0000fee4000000330000fe51078b002303eb000b0400003c0473002201c7
00310473ffee0556005805c7002f0473ffb80239ff3705c7005604730044
0556005b0400004604e30032040000280400006b04d000560383003f0538
006f0000fffd000000250000ffcc0000ffa80000ffb00000fee201c7003d
05c9005605c7006405c900ad0000fec00000ff210000feb30000feba0000
feb80000feb70000febd0000fed90000fec50000febc0000fea3063900bd
04730069078d010005c7009f056200560000ff84060a00bb04d000a0084c
010006ba009d0239009d038000cc018700d0018700fe0400009904000099
0239012a0239012c023900d002aaff8804e300c4047300ad000000000000
007400000074000000740000007400000104000001340000029800000498
000005ce000007880000081c0000089200000918000009e800000a580000
0ad000000b0c00000b3e00000b8800000c6e00000d2c00000e3800000f50
000010ae000011e8000012fe00001392000014d200001602000016560000
16f80000177c000017da000018620000193600001b1e00001c0000001d56
00001e5a00001f58000020520000212c0000226a00002380000024300000
251e00002654000026ec0000299a00002b4c00002c5400002d4a00002ed8
00003042000031c00000328a000033760000344600003614000037dc0000
38fe000039fa00003a7c00003ace00003b5200003bce00003c0200003c5c
00003dc000003f2c000040120000412200004252000043640000451c0000
4684000047e0000048f600004a9400004bae00004d7a00004eb800004f98
000051000000525a0000538a00005502000055e200005736000058060000
598200005ad600005bbc00005cba00005dee00005e3000005f7c00006018
0000604a0000607a000060a8000060da0000610a000061500000618c0000
61bc000061ec0000622a0000625c0000628e000062c2000062ee0000631e
0000634e00006382000063bc000063ea0000641e0000644c0000647e0000
64b4000064e400006518000065520000658e000065c60000660e00006640
00006686000066cc000067b000006834000069b000006af200006c660000
6cbc00006d3800006e9200007034000071c8000072b20000731600007374
000074ba00007608000077be00007924000079b400007a5c00007b200000
7c9800007dec00007ed200007fb00000801c000080f4000081dc0000832c
000083bc00008506000087080000889a0000898000008a0c00008a580000
8b1400008c4200008d8600008e0800008ea800008f4000008fc800008ff8
0000902a00009060000091fe000093b4000093ea0000941a000094f20000
95f60000967a00009710000097a4000098420000987c000098b200009916
00009a3a00009aa400009b0600009c9e00009e1200009f5400009f840000
a0000000a1000000a29e0000a2da0000a3100000a3400000a3800000a3b2
0000a3e20000a41e0000a4500000a4820000a4b20000a4e60000a5160000
a55e0000a59a0000a5cc0000a6b80000a72a0000a7c40000a8100000a878
0000a8b80000a9420000aa2a0000aac40000ab260000ab9e0000ac8e0000
ad9c0000add60000ae080000ae3a0000ae700000aede0000b0260000b1a0
0000b1d00000b2120000b3140000b4380000b4700000b56e0000b6160000
b6e20000b7d60000b9600000bb2c0000bd5a0000be740000bea60000bed8
0000bf080000bf3a0000bf720000bfa20000bfd20000c00a0000c0400000
c18a0000c1cc0000c1fa0000c22c0000c25e0000c2840000c2aa0000c2dc
0000c4340000c57c0000c5a40000c5ca0000c6020000c6320000c6620000
c6940000c7820000c8720000c8a40000c8e80000c91a0000c94c0000c986
0000c9bc0000c9ee0000ca200000ca500000ca7e0000cab40000cae60000
cb160000cb460000cb6c0000cb900000cbc40000cce40000cd180000cd5e
0000cd900000cdd60000ce140000ce460000ce780000cea80000cf220000
d01a0000d1660000d2580000d34e0000d4100000d4d20000d54a0000d682
0000d6f60000d71e0000d8340000da820000dac20000db020000db420000
db800000dbde0000dc3c0000dcaa0000dcca0000dd980000de240000de5a
0000deae0000def80000df420000df5e0000df7a0000df9a0000dfba0000
dfda0000dffa0000e0200000e0460000e06c0000e0920000e0c20000e0ea
0000e1120000e13e0000e16a0000e19e0000e1c80000e1f40000e22a0000
e2540000e2800000e2b60000e2e00000e30a0000e33e0000e36e0000e3a2
0000e3e60000e4160000e44a0000e48c0000e4c00000e4f20000e5340000
e5680000e5980000e5da0000e61e0000e6640000e6c00000e6dc0000e6f8
0000e7140000e7300000e74c0000e8ba0000eb660000edd60000edf20000
ee0c0000ee280000ee440000ee600000ee7c0000eed80000ef120000ef7c
0000f0460000f0e60000f1bc0000f23c0000f2c40000f3340000f3ca0000
f4280000f46e0000f4cc0000f52e0000f55e0000f5ae0000f5ec0000f5fc
0000f62c0000f7600000f88a0000f8b40000f8d00000f8fc0000f9340000
f9800000f9b00000f9e00000fa140000fa4a0000fa7a0000fab00000fae0
0000fb100000fb400000fb800000fbb00000fbe00000fc100000fc400000
fc700000fca00000fe180000ffd4000100080001003c0001019a00010314
0001034400010376000103aa000103dc0001042c000104680001048c0001
04b2000104e6000105fa00010620000106480001075000010776000107a0
000107c6000107ec000108f400010a4e00010a8800010ab800010af80001
0b3a00010b6000010b9600010bca00010bfa00010cda00010e4200010e72
00010ea200010ed200010f0200010f3800010f6c00010f9200010fb80001
0fee0001101e0001104e00011082000111280001117c000111aa000111da
0001120a0001123a0001126a000112a0000112d000011300000113300001
136000011394000113c8000113f8000114280001149e000114ca00011652
00011708000118ca00011aa000011c6c00011dda00011e4000011ec00001
1f0800011fac000120d6000121c2000122e00001238a0001248e000125b2
000126f2000127260001273600012746000127ec000127fc0001280c0001
281c0001282c0001283c000128ea000128fa0001290a0001298800012998
00012a5800012a6800012b1a00012b2a00012b3a00012b4a00012cb20001
2dba00012dee00012e2600012e5600012e8400012eb400012eec00012f22
0001308c0001316c0001322e0001335600013430000134aa000135ae0001
365a0001378c0001379c0001389e000138ae000139ae00013a8600013b88
00013c7a00013dde00013ed800013f1000013f4e00013f7e00013fb40001
3fea0001401e0001413600014166000142660001427600014286000142ba
000142ca00014404000145380001463e0001466e0001469e000147d40001
47e4000148ae000148be0001493000014a5600014a6600014c3200014d3e
00014e2800014e5800014f900001508a0001509a000150aa000150ba0001
50ca000150da000150ea000150fa000151dc000152f6000153060001542e
0001552a000156460001579e000158700001599400015a6200015b4e0001
5c8200015d9400015da400015e9c00015f8a0001608e0001616400016174
0001635c0001646200016472000164a2000165be000166a20001680e0001
68ec000168fc000169aa000169ba000169ca000169da000169ea00016b96
00016ba600016d0000016de200016f6a0001715e00017228000173460001
740a000174f60001761e0001771400017748000178e4000179a000017a84
00017a9400017aa400017ad600017ae600017c3200017d6600017ec80001
7ef800017f280001807600018142000181da0001820a0001840c000184dc
000185640001867800018720000188280001887600018900000189bc0001
89ee00018a6800018ab400018b9a00018bec00018c4000018c7a00018cd0
00018d5400018da000018df400018e6000018fea000190c8000191ca0001
92440001938400019420000194f2000196080001972c000197ae0001989e
0001996200019a3a00019b4e00019cae00019d3a00019e0600019efc0001
9fa80001a0da0001a2160001a31e0001a41a0001a5080001a5da0001a70e
0001a8480001a90e0001a9f00001aae40001ab340001abdc0001ad6c0001
adb80001adfc0001ae3e0001ae880001af1c0001afce0001aff40001b01a
0001b09a0001b11a0001b1460001b1720001b1c80001b2000001b2640001
b2a00001b2dc0001b35e0001b3bc0001b4000001b46c0001b4aa0001b4f6
0001b55c0001b5a20001b5f00001b6360001b7ec0001b9b20001ba0a0001
ba5a0001ba9a0001bb080001bb700001bba00001bbc60001bbea0001bc16
0001bdee0001be140001beb20001bf120001bf700001bfa00001bfd00001
c0200001c0700001c0b00001c1220001c1760001c1d40001c22a0001c260
0001c2a20001c2e80001c3320001c3620001c39a0001c3ca0001c5420001
c8880001c9a00001caba0001cc0e0001cd6a0001cdb80001ce060001ce6a
0001ceb80001cf060001cf780001d0840001d1660001d2540001d3340001
d4140001d4d20001d5c20001d66a0001d7320001d7720001d8fe0001da8a
0001dc3c0001dca80001dd140001dd700001ddce0001dec20001dfbc0001
e08c0001e15c0001e22c0001e3100001e3f40001e4d80001e4ea0001e4fc
0001e50e0001e5200001e5320001e5940001e6060001e6ea0001e6fc0001
e70e0001e71e0001e72e0001e7400001e7520001e7640001e7760001e788
0001e79a0001e8580001e91a0001e9d80001ea9a0001eb100001eb380001
eb600001eb880001ebc80001ec180001ec780001ecbe0001ed0c0001ed56
0001edae0001edfe0001ee540001eea20001eef20001ef4a0001efb20001
f0080001f0620001f0d00001f11c0001f15c0001f1a60001f1f20001f236
0001f2620001f2900001f2d40001f31e0001f3520001f3880001f3dc0001
f4300001f4760001f4ba0001f5080001f55a0001f5a80001f5f60001f64c
0001f69a0001f6d40001f7160001f73e0001f7660001f78e0001f7be0001
f7ee0001f8340001f8820001f8de0001f9220001f96c0001f9b40001fa0c
0001fa540001faa60001faf00001fb440001fb7e0001fbb20001fbe20001
fc120001fc420001fc860001fcb80001fcf00001fd180001fd4a0001fd72
0001fda00001fdc60001fe160001fe520001fe9c0001fed00001ff0a0001
ff3a0001ff940001ffce0001fffe00020026000200540002007c000200a2
000200e80002013e00020174000201a4000201d8000202080002024a0002
0296000202c6000202f60002032600020360000203940002040000020434
00020496000204ca0002053000020564000205c6000206860002076a0002
08900002097600020a2400020ad400020cd800020ed40002103c00021188
0002138a000215540002161e000216f20002179e0002186c000219340002
1a2200021b2800021c0200021d3200021e5200021f2200021f3200022050
0002214c0002225a0002235c00022374000223a6000223d4000223ec0002
25720002268e00022766000228880002298200022ab200022ba000022cec
00022df600022e0600022f0600022fb4000230e600023200000232800002
339e00023446000235b8000236ca0002381400023824000238be000239d2
00023aba00023b6c00023c5600023d7a00023e7a00023f5800023f680002
40a2000241bc0002429e000243d0000244be000245d0000246f600024706
000247da000248ec0002496600024a7a00024b1400024c2000024cfc0002
4dca00024eaa00024f7c0002503e0002512e0002521c000252fe00025440
0002557a000256760002574a000258a400025998000259c400025a0c0002
5a8a00025a9a00025adc00025b1e00025b6200025b8800025bb000025bda
00025c0200025c2c00025c5600025c6600025c9a00025ce800025d620002
5d9200025dde00025e0e00025e3e00025fb2000261020002613200026162
00026192000261c2000261e80002620e0002625000026292000262c20002
62f200026320000263460002636c00026394000263c4000263f400026518
00026602000266320002666200026696000266ca000266fa0002672a0002
675e00026792000267c2000267f2000268260002685a0002688a000268ba
000268ee000269220002695200026982000269b6000269ea00026a1a0002
6a4a00026a7e00026ab200026ae200026b1200026b3800026b5e00026c86
00026dbc00026e8c00026f7c00026fac00026fdc0002709a000271f00002
7320000273bc0002745400027484000274b40002758e000276c8000276fe
0002774c000277f00002782400027882000278b2000278e2000279120002
795e0002798e000279be00027ad600027be000027d0800027e5e00027f2e
00028076000281c400028312000283e80002854a0002855a0002856a0002
86ac000287980002886200028a0200028a1200028afc00028c0400028d6c
00028e3400028f3a0002907400029136000291bc00029244000293360002
93f20002947200029576000296ae000297d60002991800029a0e00029b0a
00029bfc00029c0c00029d4600029e8800029fc40002a03c0002a0bc0002
a1860002a21c0002a2e60002a3700002a3e60002a4cc0002a5d00002a760
0002a80a0002a8fa0002a9a60002aa980002ab6e0002ac400002ad800002
ae840002af580002afc20002b0d40002b15a0002b2060002b2d40002b3aa
0002b4a40002b5fa0002b6ca0002b7a80002b88c0002b9700002ba8e0002
bb680002bc620002bd900002bda00002be820002bf480002bf9e0002c0e6
0002c1f80002c30a0002c4860002c6540002c8360002c9c80002cb380002
ccfa0002ce900002cff60002d09e0002d2b80002d3740002d43e0002d538
0002d5e80002d6880002d71a0002d7d80002d8e20002da100002dad40002
dae40002daf40002db040002db140002db240002db700002dbbc0002dc1e
0002dd080002dd180002dd280002dd920002de000002de2c0002de3c0002
de4c0002de780002deae0002def00002df380002df820002dfb00002dffa
0002e0440002e07a0002e0b20002e0fa0002e12a0002e1820002e2440002
e3640002e3a80002e4ea0002e5b00002e69a0002e6d00002e7140002e758
0002e79c0002e7d20002e8040002e8460002e8b00002e9020002e9120002
e98a0002ea100002ea800002eae20002eb680002ebc80002ec320002eca6
0002ed160002ed740002ee1a0002eeb20002ef1e0002efac0002f0060002
f0740002f11e0002f1c40002f25a0002f2ca0002f34c0002f3b00002f45c
0002f51a0002f5c60002f6580002f6b60002f7220002f7780002f7fa0002
f8780002f8fe0002f98a0002f9e40002fa500002fac00002fb2e0002fb9e
0002fc220002fcb20002fd180002fd920002fe0e0002fe860002ff2c0002
ffc400030054000300b200030150000301cc0003025e00030302000303ac
00030444000304a0000304f40003055c00030602000306ac000307760003
081c0003087e000308d600030936000309c400030a4a00030ad800030b38
00030b9c00030c0600030c6e00030cd600030d4e00030dd600030e6a0003
0ed600030f3e00030fa20003104e0003110e000311bc0003124a000312a8
000313140003138400031428000314ce0003159200031634000316980003
17280003179a00031832000318b00003192a0003199600031a2400031a80
00031ade00031b6400031be000031c4800031cac00031d0000031d6e0003
1dd600031e5400031eca00031f4400031fc40003202000032086000320ea
0003218a0003222c000322ea0003239a000323f60003246e000324cc0003
2556000325ee0003267c000326e200032740000327ce00032840000328da
0003296e000329de00032a4e00032ac600032b2400032b8400032bfe0003
2c5800032cb800032d1200032d6e00032dd600032e3400032e6200032e8e
00032eda00032f0800032f5200032fba00033038000330a2000330ce0003
311000033182000331ee00033236000332480003325a0003326c0003327c
000332bc00033302000333380003336e000333a0000333ee000334380003
346e000334a4000334ea0003351e0003358c0003360000033648000336ac
000336fe00033710000337220003374c00033786000337f20003385a0003
38b80003390200033948000339c2000339f200033a1e00033a6a00033ae6
00033b1800033b4400033b8a00033bcc00033c1400033c4e00033c8a0003
3d0600033e2000033e8e00033ed400033f1600033f5e00033fda00033fec
00033ffe0003403600034070000340b6000340f600034124000341f80003
42b00003439a000343ee0003442a0003474a000347c20003481a00034858
000349aa00034a9e00034b1c00034c2200034cea00034dbc00034eec0003
4fbe000350f00003519000035264000352de000353ac000353bc000353fe
0003543600035578000356c800035796000357c0000357f40003592a0003
5a6000035bd200035cf600035dfc00035ee000035fe4000360800003612a
00036242000362c60003642800036516000366540003679e0003686e0003
696200036a2a00036b7c00036c9800036d8c00036ea400036ffc00037132
00037210000372e00003739e000374da000375fe0003760e0003761e0003
762e000376cc00037770000377a0000377d00003780000037830000379d6
00037ae800037bec00037d2400037e8400037fbc0003808e000381720003
82b00003840c00038580000386ca0003889200038a1800038be000038d6a
00038e7400038f6c000390ac000391e2000392760003930a0003933e0003
9372000394e0000396540003978a0003988800039aae00039c6600039cc6
00039cf600039d2600039e2000039ef600039ff40003a06e0003a0c60003
a1180003a1720003a33c0003a54c0003a67a0003a7940003a8ba0003a9d2
0003aaf20003ac6a0003ad5e0003ae4c0003afb00003b0ce0003b2400003
b3cc0003b5140003b6320003b6f40003b7ae0003b8c40003b9d40003bb5e
0003bcb60003bddc0003beea0003bf760003c0a80003c1640003c2720003
c3460003c4180003c53c0003c6620003c7a60003c8e20003c8f20003c922
0003c9520003ca8a0003cbc40003cc800003cd3a0003ce2e0003cf120003
cfda0003d0960003d1640003d2340003d3320003d44c0003d4980003d4c8
0003d4f80003d52c0003d5600003d5700003d5800003d5b00003d5e00003
d6140003d6480003d67c0003d6b00003d6e40003d7160003d8120003d822
0003d8520003d8820003d8b60003d8ea0003d91e0003d9520003d9860003
d9ba0003d9ee0003da200003da500003da800003dab40003dae80003db1c
0003db500003db840003dbb80003dbec0003dc200003dcd80003dce80003
de340003dfba0003e10c0003e2220003e3400003e4340003e5500003e66c
0003e7880003e89e0003e9820003ea4a0003eb200003ecc20003ed160003
eda80003ee120003ee740003eef40003ef540003ef860003f0780003f0de
0003f11a0003f1980003f2000003f2660003f3160003f4e20003f5820003
f5da0003f6080003f6440003f6b00003f7660003f7d80003f8400003f8da
0003f9300003f96c0003f99c0003fa020003facc0003fb220003fb5c0003
fbb80003fc160003fcc20003fd820003fdf00003fe660003fed40003fefc
0003ff240003ff540003ff820003ffa80003ffce0003fff40004001a0004
005c0004009e000400ce000400fc00040122000401480004016e00040194
000401ba000401e0000402060004022c00040260000402ac000402e00004
032c00040352000403780004039e000403c4000403f40004042400040454
00040484000404b4000404e400040514000405440004056a000405900004
05c4000405f80004061c00040640000406660004068c000406b2000406d8
0004070e0004075a0004078a000407ba000407e0000408060004082c0004
0852000408780004089e000408e000040922000409480004096e00040994
000409ba000409ea00040a1a00040a4a00040a7a00040aa000040ac60004
0af600040b2600040b4c00040b7200040b9800040bbe00040be400040c0a
00040c3e00040c8a00040cc000040d1000040d4400040d9000040dc40004
0e1000040e4000040e7000040ea000040ed000040f0000040f2e00040f54
00040f7a00040fbc00040ffc000410220004104800041078000410a80004
10ce000410f40004112800041174000411a8000411f40004123600041278
000412a8000412d8000412fe000413240004134a00041370000413960004
13bc000413e40004140c00041432000414580004147e000414a4000414d8
000415240004155a000415aa000415da0004160a00041630000416560004
1686000416b6000416dc00041702000417320004176200041796000417ca
000417fa0004182a0004185a0004188a000418b0000418d6000418fc0004
1922000419480004197c000419b0000419e400041a1400041a4400041a74
00041aa400041ad800041b0c00041b4000041b7400041ba800041bdc0004
1c0200041c2800041c5200041c7c00041ca600041cd000041cfa00041d24
00041d5400041d8400041db600041de800041e1c00041e5000041e7a0004
1ea400041ece00041ef800041f2200041f4c00041f7c00041fac00041fe0
00042014000420480004207c000420b0000420e40004210e000421380004
21620004218c000421b6000421e00004220a000422340004226200042290
000422c2000422f400042326000423580004238a000423bc000423e60004
24100004243a000424640004248e000424b8000424e20004250c0004253c
0004256c000425a0000425d4000426080004263c00042662000426880004
26b0000426d8000427020004272c0004275c0004278c000427c0000427f4
000428280004285c00042890000428c4000428ee00042918000429420004
296c0004299c000429cc00042a0000042a3400042a6800042a9c00042ad0
00042b0400042b2a00042b5000042b7a00042ba400042bce00042bf80004
2c2000042c4800042c7800042ca800042cd600042d0600042d3600042d66
00042d9400042dc200042df200042e2200042e5200042e8200042eb20004
2ee200042f2400042f6600042faa00042fee0004303200043076000430ba
000430fe000431360004316e000431aa000431e6000432220004325e0004
329a000432d6000433160004335600043398000433da0004341c0004345e
000434a0000434e20004351e0004355a00043596000435d20004360e0004
364a00043686000436c200043704000437460004378a000437ce00043812
000438560004389a000438de000439160004394e0004398a000439c60004
3a0200043a3e00043a7800043ab200043ae200043b1200043b5400043b7a
00043bbc00043bec00043c2e00043c5e00043c8e00043cb400043cdc0004
3d0200043d5c00043d9400043dee00043e6a00043f1e00043f5e00043f82
00043fc200043ff2000440320004405a00044084000440ac000440d60004
40fc000441800004420a000442d2000443000004432e0004437a000443c6
000443f40004444000044470000444a0000444c8000444f2000445700004
45f0000446b0000446e0000447100004475e000447ac000447dc0004480c
0004483c0004488a000448ba000448ea000449140004493e000449680004
49de00044a5c00044a9e00044ae000044b0600044b4800044b7800044bba
00044be000044c0800044c2e00044c5600044c7c00044cc400044d160004
4e1c000450220004518e00045340000455300004555600045798000458a6
000459b400045c1400045d7c00045f9200045fcc0004600c0004605a0004
60ac0004614c000461c4000463360004649a00046626000466de00046822
0004692000046a0e00046b3400046b8600046bd800046c3000046c860004
6cec00046d2c00046d9c00046e1a00046e9400046ee200046f1400046f44
00046f7400046fa400046fde0004701000047064000470b8000471040004
7168000471da0004723000047286000473100004735c000473b4000473e0
0004740c0004741c0004742c000474be0004759a00047734000478420004
78520004790c000479fa00047a7600047a8600047afc00047b7a00047b8a
00047c6200047c7200047d2800047d3800047d4800047e3600047ef80004
8032000481de000482ca00048360000483f000048488000484980004856e
000485dc000485ec000486a000048794000488a4000488b4000488c40004
88d4000489aa00048a9200048b8e00048bde00048bee00048bfe00048c0e
00048d3000048d4000048de000048ed200048fde0004911a0004920c0004
929800049324000494760004951c00049560000495fc000496da00049730
0004982e000498fe00049a0200049b3800049c7a00049d4e00049e8c0004
9ef400049fcc0004a0d80004a22a0004a3860004a4c40004a6f20004a82e
0004a95e0004aa520004ab660004ac8e0004ad880004af360004afb20004
b0800004b1b20004b2a20004b3a80004b4800004b5220004b5ca0004b6ea
0004b7be0004b8860004b9380004ba540004bad80004bbec0004bd700004
be3c0004bf760004c10a0004c1c80004c2380004c2c40004c37e0004c3f6
0004c5880004c6480004c7960004c9340004c9f80004cb2c0004cb880004
cc4a0004ccec0004cdac0004ce5c0004ceea0004cfe20004d0400004d18a
0004d25a0004d3400004d3760004d39c0004d3da0004d3ea0004d3fa0004
d40a0004d41a0004d42a0004d43a0004d44a0004d45a0004d46a0004d47a
0004d48a0004d48a0004d5c20004d5d20004d6c40004d7d60004d9700004
db420004dd060004de2e0004df9a0004e1060004e1a40004e2a20004e41e
0004e5120004e5d60004e6100004e6c80004e7880004e8200004e8780004
e9d20004eac00004ebd60004ecec0004ed6c0004ede40004ee3a0004ee8e
0004eec40004ef580004efc40004f18c0004f3560004f4c60004f7200004
f8b20004fa700004fbb80004fcf80004fe7a0005001800050178000502f2
0005039c000504aa0005069400050734000507d40005092e00050a5e0005
0b9800050d0400050e7200050f9200051190000512c60005137c000514fe
00051628000517880005187e00051a2400051b7400051c4400051d460005
1e1000051f98000521080005228a000524080005255c000526c80005283c
0005292a00052a4e00052b2800052c4200052d6a00052eb800052fac0005
314000053298000533920005346c00053534000536e2000537c80005387c
000538c800053914000539a600053a8200053b0600053bc200053c1e0005
3d8800053edc00053fe0000540e2000541ec0005431a0005448600054658
000547060005481c0005494e00054a3800054b0e00054bfc00054c7e0005
4d2000054e1600054f20000550700005517c000551fc0005527c0005537a
000553d60005548a000555be000556be000557e0000558b6000559aa0005
5b4c00055c7a00055dd000055f3800055fac00055ff6000560400005608a
000560d40005612600056178000561ca0005621c00056264000562ac0005
62f40005633c0005638c000563dc0005642c0005647c000564c600056510
0005655a000565a4000565f6000566480005669a000566ec000567480005
67a40005681600056888000568e600056944000569b800056a2c00056ad8
00056c2a00056d6600056d7600056e920005703000057102000571f20005
730200057458000575760005765a00057766000578900005796000057986
000579b4000579c400057ac200057bca00057cc200057db200057ea40005
7f7e0005809c000580ac000581760005824400058282000582c200058300
000583400005839a000583f20005847c000584e20005856e000588180005
88880005895800058a3800058b0800058be200058ce800058e2800058fe6
00059124000591ee000592ee000593f6000595060005959e000596380005
9752000597be00059834000599500005998e000599ec00059a2a00059a5c
00059aa000059ae200059b1200059c3a00059d2e00059e5200059ede0005
9f4400059fd20005a0a40005a1360005a1e60005a2ae0005a3060005a3d2
0005a48e0005a5060005a5160005a5260005a5360005a5460005a6680005
a67a0005a7580005a7f80005a8f60005aa080005aa660005aaaa0005aafa
0005ab4a0005ab9a0005abea0005ac4e0005aca60005ad140005ad720005
adf60005af0c0001000009f800f2003c005a000500020010002f00550000
0281024d000400040000005303ea0000000300000000006a000000000003
00000001000a006a0000000300000002000c00740000000300000003006c
00800000000300000004001800ec0000000300000005001800bc00000003
00000006001c010400000003000000070062012000000003000000080030
000e0000000300000009008a0182000000030000000d02aa020c00010000
00000000003504b60001000000000001000504eb00010000000000020006
04f00001000000000003003604f60001000000000004000c052c00010000
00000005000c05140001000000000006000e053800010000000000070031
05460001000000000008001804bd00010000000000090045057700010000
0000000d015505bc0003000104030002000e07110003000104030004001a
071f0003000104050002000e07390003000104050004001a074700030001
04060002000c076100030001040600040018076d0003000104070002000c
07850003000104070004001807910003000104080002000c07a900030001
04080004001807b50003000104090000006a00000003000104090001000a
006a0003000104090002000c00740003000104090003006c008000030001
04090004001800ec0003000104090005001800bc0003000104090006001c
010400030001040900070062012000030001040900080030000e00030001
04090009008a0182000300010409000d02aa020c00030001040a0002000e
071100030001040a0004001a071f00030001040b0002001407cd00030001
040b0004002007e100030001040c00020010080100030001040c0004001c
081100030001040e00020008082d00030001040e00040014083500030001
04100002000e08490003000104100004001a08570003000104130002000e
08710003000104130004001a087f0003000104140002000c078500030001
04140004001807910003000104150002000e08990003000104150004001a
08a70003000104160002000e08c10003000104160004001a08cf00030001
04190002000c08e90003000104190004001808f500030001041b0002000e
090d00030001041b0004001a091b00030001041d0002000c078500030001
041d00040018079100030001041f0002000c093500030001041f00040018
09410003000104240002000e09590003000104240004001a096700030001
042a0002000e098100030001042a0004001a098f00030001042d0002000c
09a900030001042d0004001809b500030001080a0002000e071100030001
080a0004001a071f0003000108160002000e08c10003000108160004001a
08cf000300010c0a0002000e0711000300010c0a0004001a071f00030001
0c0c000200100801000300010c0c0004001c081100a90020003200300031
003100200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e0041007200690061006c004900740061006c00690063004d
006f006e006f0074007900700065003a0041007200690061006c00200052
006500670075006c006100720020004900740061006c00690063003a0056
0065007200730069006f006e00200035002e0030003800200028004d0069
00630072006f0073006f0066007400290041007200690061006c00200049
00740061006c006900630041007200690061006c002d004900740061006c
00690063004d00540041007200690061006c002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e004d006f006e006f007400790070
006500200054007900700065002000440072006100770069006e00670020
004f006600660069006300650020002d00200052006f00620069006e0020
004e006900630068006f006c00610073002c002000500061007400720069
0063006900610020005300610075006e0064006500720073002000310039
003800320059006f00750020006d00610079002000750073006500200074
00680069007300200066006f006e007400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d007300200066006f0072
0020007400680065002000700072006f006400750063007400200069006e
0020007700680069006300680020007400680069007300200066006f006e
007400200069007300200069006e0063006c0075006400650064002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002ea9203230
313120546865204d6f6e6f7479706520436f72706f726174696f6e2e2041
6c6c205269676874732052657365727665642e417269616c4974616c6963
4d6f6e6f747970653a417269616c20526567756c6172204974616c69633a
56657273696f6e20352e303820284d6963726f736f667429417269616c20
4974616c6963417269616c2d4974616c69634d54417269616c2069732061
2074726164656d61726b206f6620546865204d6f6e6f7479706520436f72
706f726174696f6e2e4d6f6e6f7479706520547970652044726177696e67
204f6666696365202d20526f62696e204e6963686f6c61732c2050617472
69636961205361756e646572732031393832596f75206d61792075736520
7468697320666f6e7420746f20646973706c617920616e64207072696e74
20636f6e74656e74206173207065726d697474656420627920746865206c
6963656e7365207465726d7320666f72207468652070726f647563742069
6e207768696368207468697320666f6e7420697320696e636c756465642e
20596f75206d6179206f6e6c792028692920656d62656420746869732066
6f6e7420696e20636f6e74656e74206173207065726d6974746564206279
2074686520656d62656464696e67207265737472696374696f6e7320696e
636c7564656420696e207468697320666f6e743b20616e64202869692920
74656d706f726172696c7920646f776e6c6f6164207468697320666f6e74
20746f2061207072696e746572206f72206f74686572206f757470757420
64657669636520746f2068656c70207072696e7420636f6e74656e742e00
430075007200730069007600610041007200690061006c00200043007500
720073006900760061006b00750072007a00ed0076006100410072006900
61006c0020006b00750072007a00ed00760061006b007500720073006900
760041007200690061006c0020006b00750072007300690076004b007500
720073006900760041007200690061006c0020004b007500720073006900
7603a003bb03ac03b303b903b10041007200690061006c002003a003bb03
ac03b303b903b1004b00750072007300690076006f006900740075004100
7200690061006c0020004b00750072007300690076006f00690074007500
4900740061006c00690071007500650041007200690061006c0020004900
740061006c006900710075006500440151006c0074004100720069006100
6c002000440151006c00740043006f0072007300690076006f0041007200
690061006c00200043006f0072007300690076006f004300750072007300
69006500660041007200690061006c002000430075007200730069006500
66004b0075007200730079007700610041007200690061006c0020004b00
75007200730079007700610049007400e1006c00690063006f0041007200
690061006c00200049007400e1006c00690063006f041a04430440044104
3804320041007200690061006c0020041a04430440044104380432004b00
750072007a00ed007600610041007200690061006c0020004b0075007200
7a00ed00760061013000740061006c0069006b0041007200690061006c00
20013000740061006c0069006b0050006f016100650076006e006f004100
7200690061006c00200050006f016100650076006e006f006e0067006800
6900ea006e00670041007200690061006c0020006e00670068006900ea00
6e006700450074007a0061006e00610041007200690061006c0020004500
74007a0061006e006100b15430bb02aa0001004002a8b2393340b802a8b3
10153240b802a8b2073340b802a9b30c12327f411102a600af02a600bf02
a600ef02a60004003002a6004f02a6005f02a60003004002a6b28f3340b8
02a6b25f3340b802a6b34e513280b802a6b34c4d3240b802a6b340483240
b802a6b30a0d3240b802a6b3093a3240b802a6b330333280b802a4b34578
3240b802a4b3323a3280b802a4b32a313240b802a4b32425327f411002a4
000100ef02a40001000f02a4002f02a4003f02a4007f02a40004004002a4
b3151d3280b802a4b309143240b802a3b31a1b320fbf02a3007f02a300ef
02a30003004002a3400a091432124f064f0702ef413701eb0001009f01eb
0001007f01eb0001005f01eb0001003f01eb0001002f01eb0001000f01eb
0001007f01ea000100ef01ea000100bf01ea000100af01ea0001002f01ea
0001003f01ea0001004f01ea0001006f01ea0001007f01ea000101ed01ed
01ec01ec01eb01eb01ea01ea4012002c01001f01102c01101f01402c0140
1f01b90109010bb2341f91b8010b4037341f2e20431f3220431f3320471f
2c20431f1f20431f7b2a481f2d2a481f212a441f37010001010009010200
0800171700000012110840b801acb7fe870dfd870d0009b8013fb22a4c1f
4109013a00ba0401001f0136001f019a001f0104b22a721fbe0101002001
9a001f0100002002abb21ffb2db80156b21ffa1fb80801b21ff91fb80201
40131ff81fe41ff71fbb1ff51f4a1fc92aab1fb92db8019ab21fb81fb804
01b21fa02ab802ab400f1f8b1f521f7b2ae41f781f6c1f6e20b80401b21f
6c21b80401400b1f632aab1f5a2a5a1f5820b802abb21f4e20b80156b21f
471fb8019ab61f452aab1f442ab80101b61f401f891f332db80401b21f32
21b80401b61f311f721f2e1fb8019ab21f2c1fb80401b21f291fb80801b2
1f281fb80801b61f271f6c1f2221b8040140451f550d090d093790dc0790
a80790a607907e07904107903b07903607903507903007902f07902b0790
2507901d071408120810080e080c080a080808060804080208000814b8ff
e0402b000001001406100000010006040000010004100000010010020000
01000200000001000002010802004a00b013034b024b5342014bb0c06300
4b6220b0f65323b8010a515ab005234201b0124b004b544218b0382b4bb8
07ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801
19b101018e851bb0124358b900010119858d1bb9000101ff858d59590016
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b2b2b4b5079b9001f0158b3071f3d072b2b4b5379b900900158b307903d
072b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58
b901ae01ac4544b901ad01ac45445958b9032c01ae455258b901ae032c44
59594bb8019a53205c58b9003f01ae4544b901ae01ae45445958b908d600
3f455258b9003f08d64459594bb8040153205c58b9002301ae4544b90020
01ae45445958b916200023455258b9002316204459594bb8040153205c58
b9001e01ad4544b9002a01ad45445958b917e0001e455258b9001e17e044
59594bb8040153205c58b1ba234544b1232345445958b9162000ba455258
b900ba16204459594bb03c53205c58b11f1f4544b1211f45445958b90102
001f455258b9001f01024459594bb04653205c58b11f1f4544b12d1f4544
5958b9012e001f455258b9001f012e4459594bb8030153205c58b11f1f45
44b11f1f45445958b90d20001f455258b9001f0d204459592b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b65422b2b45695342014b5058b108004259435c58b108004259161070
3eb0124358b90d193ea51bba00d203eb000b2b59b00a2342b00b2342003f
3f182b103c012f060cb0062342b0072342b0124358b93b21187e1bba0400
01a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400040000
0b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59
b0102342b0112342002b2b2b2b2b2b2b2b2b2b2b74747575757500184569
444569444569444569447373737373737373757373737373737374004bb0
2a534bb03f515a58b1070745b040604459004bb030534bb03f515a58b10b
0b45b8ffc0604459004bb02e534bb03c515a58b1030345b040604459004b
b02e534bb03c515a58b1090945b8ffc0604459435c58b64f2c014f1f0137
2b7474592b732b2b2b7373742b2b2b2b2b2b2b2b2b2b2b2b74732b2b2b2b
742b000000>
[16173 16065 15681 16357 15501 16301 16041 16313 15577 16241 16101 16289 16325
16325 16309 16293 16337 16369 15989 16357 15805 16305 17461 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 6942 36 <0002ffd7000004ef05ba0007000e00a04046080606020608080705090a0c
0406080e0c0c0706080f0509100c970c0102200100001e070c1407070c02
0c04041e03021403030201070f04030203100cfb0201020908210506b801
bb400e07070404030300080ca90f8382182b1910f400183f3c103c103c10
f43cfd3c3f3ced01111739113939872e2b877dc4872e182b7d10c42b1112
393912393987100ec405c4c4870ec405c4c407103c8710c4313023013313
230321030121032627060729033fe7f2be47fdafeb013f01e53921083260
05bafa4601a6fe5a023d0170db927ead>Arial-ItalicMT AddT42Char 
1 7168 37 <000300590000053d05ba0012001c002800d5404726201011341520101134
39226915c71cc71d0413281d1c282615130b0524290b13281c1d1d1e0001
140000011413212828272700041b1c2101602804021e1d2128120008172a
08b80296400d0e2a00244f2460248024042424b801d5401e1d0901010009
1c1c091d1d7b090f002f00020000462909011000174651182b2b2b3c012b
7a4e10f001182f5d2b7a4df101182f2b3c012f2b103c012f2b7a10f20118
2f5dfdf4ed003f3c2bfd003c3f2bf4fd003c1112392f3c10fd3c87052e2b
7d10c4001112390111121739073c3c3130015d2b2b33012132171e021514
06071616151406062301213236353426262321032132373e023534262321
59013301c67c3c62874a858977768be58dfeae0129d5bb3a6186fec8ed01
4e852e5d744281b5fe8c05ba0a1155935979b830279d6979de7903488882
3e5a29fb9309104d7e45676b>Arial-ItalicMT AddT42Char 
1 7510 38 <000100baffe705d805d3001b009fb396080113b8ffe0b30f113414b8ffe0
400e0e1134102010113411200d113418b8ffe040310b1134041814180226
143f104603781004100e1416151910120f390e920b013990000100000412
2d0b03192d0409007b01b8026140140f7b0e162a3007012f070107341c0e
431d3443182b4e10e610f45d714ded10edf4ed003fed3fed12392f5de410
fdf41139123901123912393130015d5d2b2b2b2b2b005d01170600232000
11101336213204170726262320070611141633323604d3c25cfea0dbfef5
fec7eed4013be9012117b71db58ffef3a690deb298f602041bfefefc0146
0130018c0103e7fad3119f9defcefee5e2eec600>Arial-ItalicMT AddT42Char 
1 7770 39 <0002005b000005b205ba000f00200092404a17200b11341c200b11340014
20143014b014040f010f200209010b1c1f011b1c1f202f012f2007470501
2010101e0001140000011f2021010128020213391021280f00081a2a0851
2210b8010740110f002f00020046217001010110004651182b2f2b3c5d01
4e10f45d4ded4e10f64ded003f3c2bfd00e43f2b3c10fd003c05872e2b7d
10c43130005d015d5d712b2b33012132171e021514020606070623253332
37363736373636353426272623215b013201ba9f5478aa566badbd81628f
fed7e89d7a4c36473a4c5b7c604796fefd05ba171f9fee94b1fedddd7d1e
17a61d12232d4a62fba0b2bf1f17>Arial-ItalicMT AddT42Char 
1 8024 40 <0001005c000005b105ba000b00c4403d2b0229033a0240076202050a0302
020b05080904080d0c0409091e0001140000010605210808070700030421
280201020a0921280b000807c200060106b8025fb70505040903c20202b8
025f401d0904040909097b00090101090f002f00020000460c0901100017
466b182b2b2b3c012b7a4e10f001182f5d2b3c012f2b7a4d10f101182f2b
3c012f2b7af001182fe42b103c012ff45de4003f3c2bfd003c3f3c2bfd00
3c12392f3c10fd3c87052e2b7d10c401111239073c3c8710c4c43130015d
3301210721032107210321075c0133042223fca260034823fcb86a039b23
05baa7fe38a7fe02a600>Arial-ItalicMT AddT42Char 
1 8274 41 <0001005d0000054805ba000900ab40361f011f041b080333033606ff02fb
06040508090405080b0a0409091e00011400000106052108080707000304
21280201020928000807b80175b310060106b801c2b60505100403c202b8
01c24018040410097b74010101100f002f000200460a011000466b182b2f
2b3c014e10f45d2b3c5d014dfd2b3c0110f4e4102b3c0110e45de4003f2b
3c003f3c2bfd003c12392f3c10fd3c05872e2b7d10c40111123939073c3c
3130015d5d330121072103210721035d013203b923fd0b61030323fcfd8b
05baa7fe2da7fd67>Arial-ItalicMT AddT42Char 
1 8492 42 <000100c7ffe7062105d3002000ccb9001effe040110e1134471f011e2a0e
113415200e113418b8ffe8b30b11341cb8ffe040410b11340b141b14141c
3b154610050001221a031f001d28201f1f1e0302140303021f1e13391292
0e202800210228010106162d0e031d2d0609132a120209021003b8013e40
17221a2a300a012f0a010a3403212802100303210a3451182b2b103c012f
2b3c2b10c0014ef45d714ded10f62b3c2b10d401ed003fed3fed12392f2b
3c00fd2b3c0010fde408872e2b057d10c42b111239390111123939313001
5d2b2b2b2b005d2b01372103060423202726111012243332161617072626
232204021514163332371303472302827d79feca96fec09e85e90163d99c
f8841dc01fc3999ffeeca5dac0bfdc420242a6fdab4c60c1a30100010801
b1cf71bd981597a1adfea3dedde27e013b00>Arial-ItalicMT AddT42Char 
1 8810 43 <000100560000060805ba000b00df404a0409080805030a0b020a09040304
0d0c020b0b1e0001140000010607071e080514080805090a0403210a0a02
0b06050502022801020b0808070728000806060907077b08090505090808
b8028a40230d090202090b0b7b00090101090f002f00020000460c090100
0508100017081746ac182b2b2b2b103c103c012b7a10f201182f5d2b3c01
2f2b7a10f101182f2b3c012f2b7a10f001182f2b3c012f2b7a10f101182f
2b3c012f003f2b3c103c103c003f2b3c103c103c001112392ffd3c103c87
052e2b7d10c4872e182b7d10c40111121739073c3c07103c3c3130330133
032113330123132103560133c37f02f87fc4fecec490fd099105bafd9f02
61fa4602b3fd4d00>Arial-ItalicMT AddT42Char 
1 9088 44 <000100750000026b05ba00030094400910050109013f050205b8ffc0b326
2a3405b8ffc0b318233405b8ffc040271415340203031e00011400000102
280102032800080202090303a00009010109004012233f0000b8ffc04011
1a2234100001009e0409011000179e97182b2b2b3c012b7a4e10f05d2b01
182f2b2b3c012f2b7a4d10f101182f2b3c012f003f2b3c003f2b3c87052e
2b7d10c431302b2b2b015d5d33013301750133c3fece05bafa46>Arial-ItalicMT AddT42Char 
1 9264 45 <00010044ffe7044905ba001500a44024761001300f400f500f600f720fa8
0db80d070014010b030d0e0e1e0b0c140b0b0c016000b8028c4019060c02
062d11090d0d090e0e2a0b09600c700c020c0c090b0bb801c0401b09032a
2f143f144f1490140414560b16280c100b170b160a4669182b2b103c2b2b
3c2b10c0014ef45d4dfd2b7af201182f2b3c012f5d2b7a10f101182f2b3c
012f003fed3f10f4e4870e2e2b057d10c40111123912393130015d5d1337
061514163332363736371333030606232226353453b610655a41631f1819
dac3df2fdcabb6ba01ab0d552851613b3e2f7a040ffbd1e2c2a89843>Arial-ItalicMT AddT42Char 
1 9502 46 <0001005b000005ee05ba000b00f84057120003011f011f021b031b060409
09080a0a050303040a0a050b02020b0b1e00011400000103040302041e05
0a1405050a0706061e09081409090806050a09080703050d0c0a0903030b
0504022801020b280807000805b80137400d0d72010101100f002f000200
46b9013700182b2f5d2b3c5d014e10e6003f3c3c2b3c003f2b3c003c3c12
1739011112173908874d2e2b057d10c4872e182b087d10c405872e182b7d
10c407083c083c0710083cb10602435458400b06180c113409200c113403
b8ffd0400e0b11340618122834091812283403b8ffe0b2122834002b2b2b
2b2b2b593130015d0072435c58b40428121834012b593301330301210101
230101035b0132c493031c0114fd5701f3dbfe59fecd6405bafd3e02c2fd
abfc9b02e7fef5fe2400>Arial-ItalicMT AddT42Char 
1 9812 47 <000100520000043205ba0005007540180203031e00011400000102280102
0403212805000805c204b80129401b0702020903037b00090101090f002f
000200004606090110001746b9012900182b2b2b3c012b7a4e10f001182f
5d2b3c012f2b7a4d10f101182f2b3c012f4e10f64de4003f3c2bfd003c3f
2b3c87052e2b7d10c43130330133012107520132c4fef102f92305bafaec
a600>Arial-ItalicMT AddT42Char 
1 9964 48 <0001005a000006fa05ba0018024d403f9f1a013603370737093610470747
094610491259035b126c036d0469086b09690c690d6f1269136f1a79127f
1a890385118a12a912d812df1a1b9f1adf1a02b10602435458b40a001a19
05b8ffe8b30c0d3405b8ffd0401a0e11340e100b1c3415400b1c3405150e
0300010b120008080102003f3c3f3c3c111217392b2b2b2b01111239391b
b9000fffe0b20e2006bcffc00005ffc00004ffc040230304050502060708
08050c0d0e0e0b0f1011110e13141515121617181815880e080920b8ff65
b305121120b801284052150102200205051e12151412050812150805051e
110e14110502110e090a0a1e0b0e140b0b0e0100001e1815141818150501
18155a02090e7b082808020201021812281211110b0b0a0a28000809090a
0908b80175b5050101000902b8013b40100500007b180915150918189305
090e0eb8ffc0b3292b340eb8ffc0b31525340eb8ffc0403c0e10340e2f0b
9f0baf0b036f0b7f0bdf0b030b2f1a3f1a021aca0a090a0a7b090b0b9309
20059005026005010505191a0e0b1518100b17181746ac182b2b2b2b103c
103c01191112392f5d712b7af001182f2b7ae101182f2b10f2717a105d71
c12b2b2b01192f2b7a10f001182f2b7ac001192f2b7a10e101182f1910e4
2b103c01182f1910e42b103c01182f003f2b3c103c00103c103c2b103c00
3f3c103c2b10ed3c10ed0011123987052e2b7d10c4872e182b7d10c48708
2e182b057d10c487082e182b057d10c42b2b2b87100ec4c487100ec4c487
100ec4c487100ec4c487100ec4c487100ec4c40038383801383859313001
715d72330133131617363701330123133613060701230326270607035a01
32f1941d093d8f0202f5fecec19935633f5dfddebd9314091918c305bafc
4abbac94fd038cfa4602c9f701338fa5fc4103ac81acc171fc59>Arial-ItalicMT AddT42Char 
1 10650 49 <000100640000060e05ba00130163406974037605790e03390e590e660569
0e801005270c370c6411760a760b8702890d0708090a0a070e0f10100d11
1213101013100d131e0001140000010c0b0b1e0a07140a0a0702100d0d1e
0702140707020b0a0a0228020102075a0c130d105a02280d0c0c2800080d
0db801fa401a0c0902027b01090b0b0c090a0a07090c0cfb090740078007
0207b8018640290009101013090101000913137b090f002f000200004609
07142801000a07100017071707140a46ac182b2b103c2b2b2b103c103c2b
10c0012b7a4ef001182f5d2b7a4de101182f2b103c012f2b7a10c001192f
2b7a10f15d01192f2b7ae101182f2b7a10c001182f2b103c012f2b7a10e1
01182f2b7a10e201182f003f2b3c00103c2b10ed103c10ed003f3c2b103c
103c87052e2b877dc4872e182b7d10c4872e182b087d10c4870ec4c48710
0ec4c487100ec4c4b10602435458b510200a0c3407b8ffe0b20a0c34002b
2b593130015d005d5d330133131617161736371333012301262706070364
0133bef7714226321b29b4bffecec2fe9461360f2bba05bafddafcac64aa
b9c5035efa46034fe0ab8fd0fc85>Arial-ItalicMT AddT42Char 
1 11084 50 <000200bbffe7062e05d30010001f0096401a2702280b0279138414021820
0b113417200b11341c200b113413b8ffe0b30b10341eb8ffe0401e0b1134
0613091c16131b1c04280148185713031d2d0303152d0d091a2a06b8ffc0
b324383406b8ffc0b31b223406b8ffc04017161734800601065121112a30
00012f00010034203451182b4e10f45d714ded4e10f65d2b2b2b4ded003f
ed3fed3130015d5d2b2b2b2b2b5d005d1310002120001114070606070623
222402371416163332363612353402232200bb01c50143011201595741c6
7196a8b0fedf95c16bd47571cca15df5b4e6fea00266018801e5fe9bfed4
d6b789c73648a8012da081d87a6bbf011787db0104fe7700>Arial-ItalicMT AddT42Char 
1 11348 51 <000200580000059505ba000f001a009b4038a804a713022c133a13781389
12040e101a0f13100e10151b1302111a0f0f1e0001140000011110210d0e
0e00191a21280201020f2800081ab801bf4022152a2f063f065006600670
0680060606691c1f0174010201100f002f0002004669182b2f5d2b3c5d01
4e10f65d4dfde6003f2b3c003f3c2bfd003c12392f3cfd3c05872e2b7d10
c40011123901111239391139073c3c3130015d005d33012132161615140e
020706232103132132363635342626232158013302649f9f684a7174428d
90fe917c9f0143bcb06a386691fe8805ba49b16e5bbc7a3e0f21fdad02f9
51a65d485b2b>Arial-ItalicMT AddT42Char 
1 11594 52 <000200bdff58063005d30018002e00f3401459296905661a841a04361930
1a021a200e113421b8ffe0b310113421b8ffe040090e11341e200b113425
b8ffe040440b103406251b1a1b1e1625802605280e291127177f29fa0005
2600391139297b1a7621e900063c003a023c19452b042d2c2b0323192903
02161c040300051929272c2d2bb80135401127032d0239071f2d1303272d
07091c2a16b8ffc0b324383416b8ffc0b31b223416b8ffc0401716173480
1601165130232a300c012f0c010c342f3451182b4e10f45d714ded4e10f6
5d2b2b2b4dfd003fed3fed10f4ed10f6ed11393912391239011112393912
39111739313001715d5d5d2b2b2b2b2b00715d2516170726270623222426
023534373636373633200011140225361235340223220402151417163332
37262737161604d64a7e57856a95876cfefeae63493dc37499b201120159
b8fee67996f4b194feeea49a78896d575b6047416976585274577c4652a6
01059ebfaf90d1394bfe9bfed4ddfe8b045e0149b2de0105adfeb2c5f787
692253327a1c4d00>Arial-ItalicMT AddT42Char 
1 11992 53 <00020060000005d705ba0017002400ef408121201011341d200c1134570b
010d0e0e0b1012120f161824171b18161309051f2513162417171e000114
000001120f0f1e0e0b140e0e0b120f0b03250e261f0b12170986161b6018
21161615150023242128020102170f280f0e0e000824240917177b000901
01090f00010000b525091f2a2006300602064326011000178f43182b2b2b
3c014e10f6714ded2b7a10f201182f5d2b3c012f2b7a10f101182f2b3c01
2f003f3c103c2b103c003f3c2bfd003c12392f3c10fde410e51239390111
1239121739872e2b0e7d10c487052e182b7d10c40012390111121739073c
3c87100ec487100ec43130015d2b2b330121321616151406051617161713
230326272626232303132132373e023534262623216001330267b6bc6bea
fefb50295c3870db693949326875e488a9010fbc396f8e4e3a5e71fe2205
ba3da880b3ec233b39818afeec0111946c4b2ffd75032a050b4e844c405f
2200>Arial-ItalicMT AddT42Char 
1 12354 54 <00010090ffe7055f05d3003700d9b9002cffe0b30d11342ab8ffe040180d
11340c200c1134742e8229023604360838210309360104b8ffe040340d11
3421200d113407200d1134252f362d940b030f0d0b2a2c2e0616351d391c
0039011d1d16010135232d1603062d3509017b00b8013b400d272a201230
12020f1270120212b80233b338092a31b8ffc0400a0c113431c71d2a1a60
1cb8ffc04010222834201c301c022f1cd01ce01c031cb8028bb339c84318
2b10f55d712bf4fdf42bed10f65d71edf4ed003fed3fed12392f11392f10
e410e4111217393130015d2b2b2b5d005d5d2b2b2b133707141616333236
35342726272627262635343636333216161514070734272e022322070615
1416171617161716161514060423222490c0024eb47cb0b93132dfad3f63
5e7cef96b3f66f01bd0b1454935ba05944384934c39e3c505691ff00a5f9
fec501da1233558d4d9a63453938604b2841996271b66078c85b09150f3e
233d543348375b3655291d56462835976077c96ed900>Arial-ItalicMT AddT42Char 
1 12736 55 <000100ff000005a405ba0007009f40361b02012000200736030302030908
01060302280607071e000114000001050221040302072800080606090707
7b0009011f0101010900b8ffc0b321223400b8ffc0400c1c1e342f003000
b000030000b801c5b60809011000178fb9010200182b2b2b3c012b7a10f2
01182f5d2b2b2b3c5d012f2b7a10f101182f2b3c012f003f2b3c003f3cfd
3c87052e2b7d10c42b1112393901111239393130015d5d21012137210721
0101d1010ffe1f23048223fe23fef10513a7a7faed00>Arial-ItalicMT AddT42Char 
1 12938 56 <000100c6ffe6060905ba00180096403209100911342710201a5b15691577
017815060d0e0e1e0b0c140b0b0c0104041e1600141616000d0c01000228
072d1209280db8013bb50e2a860c010cb8013b4009400b500b02000b010b
b80267400e1a01a2042a86000170000100a216b801fab3193482182b10f6
e45d71fde410f45d71e471fde42b3f00ed2b3f3c3c3c870e2e2b057d10c4
870e2e182b057d10c43130015d2b01330306151416333236363713330306
0204232226263534370196c4bc17ba8d70c1702da9c4b32e96fef6b0a6f3
792905bafc7b7036769067c8db0327fca4dcfeff9b6ec27b4dbc>Arial-ItalicMT AddT42Char 
1 13174 57 <000100fe0000060e05ba000a009c40134401440254015402040304050502
0607080805b8ff6f402b05000a20090a0a210508140505080001011e0205
14020205050a090808020201020a0008097b08400ac308ba0117000001f8
400c0520017b4002a205bb0b208fb9010200182b191a10fd18f41aed191a
10ed18e419ed181a10ed003f3c3f3c103c103c123987052e2b7d10c4872e
182b7d10c42b87100ec4c487100ec4c43130015d21013313161736370133
010218fee6bdaa2f0e5c3b020bcafcdc05bafc96ee92bc6e03c0fa46>Arial-ItalicMT AddT42Char 
1 13382 58 <000101000000087e05ba001e015c40182817014800491958005919690069
1979007919880089190ab10602435458b71701201f86090110b8ffc0b30b
283409b8ffe840150b28341b400b2834091b10030001180008150c010200
3f3c3c3f3c111217392b2b2b5d01111239391b404d191a1b1b1808070605
04030202090f0e0d0d100b0c0c0912141515101d1e0c1b1e1e1e090c1409
090c171015151e1617141616171e1b091720101b1009031e16150d0c0202
1e181708157b4016b8017db2102017b8013eb31821100cb8013eb50d211b
021e01b801d2b300210920ba0168001001d2b51bbb09931f8fb901400018
2b10f4fdfde410edfded10fde610fde61a1910fd1a18ed003f3c3c3f3c3c
3c3c12173901111239111239872e2b877dc4872e182b877dc4100ec48710
0ec4c487100ec487100ec4c487100ec4c4c4c4c4c487100ec4c44bb01953
58b9001bffe0b6102009201b1009007d2f2f7c2f0138383859593130015d
005d21033313161716151407363701331316173637363701330123032627
060701015a5ac722030702017a3601beca310803122e492301a2c8fd16d2
3107043d29fe0405bafd2b34e6401a1152fa66034cfca793cf3365a34603
3afa46037872a68b4dfc4800>Arial-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007004ab10201bb012e000600070237b200
0504b8012eb403000a0704b8012eb5010019080605bb012e000200030143
b3095bbe182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c3130
211121112521112101000400fc2003c0fc400500fb002004c000>Arial-ItalicMT AddT42Char 
Arial-ItalicMT /CharStrings get begin
/A 36 def
/B 37 def
/C 38 def
/D 39 def
/E 40 def
/F 41 def
/G 42 def
/H 43 def
/I 44 def
/J 45 def
/K 46 def
/L 47 def
/M 48 def
/N 49 def
/O 50 def
/P 51 def
/Q 52 def
/R 53 def
/S 54 def
/T 55 def
/U 56 def
/V 57 def
/W 58 def
end
Arial-ItalicMT /Encoding get
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
pop
end
%ADOEndSubsetFont
/AYCWKY+Arial-ItalicMT /Arial-ItalicMT findfont ct_VMDictPut
/AYCWKY+Arial-ItalicMT*1 
[65{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
168{/.notdef}rp]
AYCWKY+Arial-ItalicMT nf
AYCWKY+Arial-ItalicMT*1 [12 0 0 -12 0 0 ]msf
215.02 486.87 mo
(B)sh
215.02 465.78 mo
(A)sh
214.36 444.69 mo
(C)sh
214.36 423.6 mo
(D)sh
215.02 402.51 mo
(E)sh
215.7 381.42 mo
(F)sh
213.69 360.33 mo
(O)sh
215.02 339.24 mo
(P)sh
213.69 318.14 mo
(Q)sh
214.36 297.05 mo
(R)sh
215.02 275.96 mo
(S)sh
211.7 254.87 mo
(W)sh
215.02 233.78 mo
(V)sh
214.36 212.69 mo
(U)sh
215.7 191.6 mo
(T)sh
214.36 170.51 mo
(N)sh
213.03 149.42 mo
(M)sh
219.69 128.33 mo
(I)sh
217.03 107.24 mo
(J)sh
216.36 86.14 mo
(L)sh
215.02 65.05 mo
(K)sh
213.69 43.96 mo
(G)sh
214.36 22.87 mo
(H)sh
/AYCWKY+Arial-ItalicMT*1 uf
/AYCWKY+Arial-ItalicMT uf
/Arial-ItalicMT uf
/AYCWKX+AdobePiStd*1 uf
/AYCWKX+AdobePiStd uf
/AdobePiStd uf
2 lc
[] 0 dsh
484 484 mo
458.47 484 li
@
484 462.91 mo
483.9 462.91 li
@
484 358.09 mo
454.94 358.09 li
@
454.94 431.27 mo
436.67 431.27 li
@
436.67 441.82 mo
404.67 441.82 li
@
436.67 420.73 mo
419.63 420.73 li
@
454.94 284.9 mo
421.28 284.9 li
@
421.28 399.64 mo
366.36 399.64 li
@
421.28 170.17 mo
381.18 170.17 li
@
381.18 320.34 mo
367.31 320.34 li
@
367.31 378.55 mo
361.94 378.55 li
@
367.31 262.13 mo
363.35 262.13 li
@
363.35 337.02 mo
361.72 337.02 li
@
361.72 357.45 mo
342 357.45 li
@
361.72 316.59 mo
359.33 316.59 li
@
359.33 336.36 mo
353.76 336.36 li
@
359.33 296.82 mo
354.54 296.82 li
@
354.54 315.27 mo
350.77 315.27 li
@
354.54 278.36 mo
351.99 278.36 li
@
351.99 294.18 mo
343.4 294.18 li
@
351.99 262.55 mo
346.33 262.55 li
@
346.33 273.09 mo
325.05 273.09 li
@
346.33 252 mo
340.27 252 li
@
363.35 187.24 mo
360.88 187.24 li
@
360.88 230.91 mo
360.87 230.91 li
@
360.88 143.58 mo
359.32 143.58 li
@
359.32 183.45 mo
349.36 183.45 li
@
349.36 199.27 mo
349.34 199.27 li
@
349.34 209.82 mo
309.73 209.82 li
@
349.34 188.73 mo
349.31 188.73 li
@
349.36 167.64 mo
330.88 167.64 li
@
359.32 103.7 mo
357.91 103.7 li
@
357.91 146.55 mo
350.23 146.55 li
@
357.91 60.86 mo
355.45 60.86 li
@
355.45 80.64 mo
355.43 80.64 li
@
355.43 99.09 mo
348.6 99.09 li
@
348.6 114.91 mo
348.59 114.91 li
@
348.59 125.45 mo
341.13 125.45 li
@
348.59 104.36 mo
328.74 104.36 li
@
348.6 83.27 mo
338.02 83.27 li
@
355.43 62.18 mo
351.37 62.18 li
@
355.45 41.09 mo
345.71 41.09 li
@
381.18 20 mo
381.14 20 li
@
484 484 mo
484 462.91 li
484 358.09 li
@
454.94 431.27 mo
454.94 284.9 li
@
436.67 441.82 mo
436.67 420.73 li
@
421.28 399.64 mo
421.28 170.17 li
@
381.18 320.34 mo
381.18 20 li
@
367.31 378.55 mo
367.31 262.13 li
@
363.35 337.02 mo
363.35 187.24 li
@
361.72 357.45 mo
361.72 316.59 li
@
359.33 336.36 mo
359.33 296.82 li
@
354.54 315.27 mo
354.54 278.36 li
@
351.99 294.18 mo
351.99 262.55 li
@
346.33 273.09 mo
346.33 252 li
@
360.88 230.91 mo
360.88 143.58 li
@
359.32 183.45 mo
359.32 103.7 li
@
349.36 199.27 mo
349.36 167.64 li
@
349.34 209.82 mo
349.34 188.73 li
@
357.91 146.55 mo
357.91 60.86 li
@
355.45 80.64 mo
355.45 41.09 li
@
355.43 99.09 mo
355.43 62.18 li
@
348.6 114.91 mo
348.6 83.27 li
@
348.59 125.45 mo
348.59 104.36 li
@
1 lc
[0 3 ] 0 dsh
458.47 484 mo
288.98 484 li
@
%ADOBeginSubsetFont: AdobePiStd Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /AdobePiStd def
/FontInfo 7 dict dup begin
/Notice (Copyright 2002 Adobe Systems Incorporated. All rights reserved. Adobe is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /uni25CF put
def
/FontBBox {0 -196 1276 826} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 725 750 500 525] def
/StdHW [50] def
/StdVW [50] def
/StemSnapH [50] def
/StemSnapV [50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/uni25CF <1C60D8A8C9B6CAC20393B820A953E6ED15C444D2FC84BF4B10D0B3
0839933397D3264466EBB484089E8F13950BA5D9693EB673B9697E5F3B360819> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/AYCWKZ+AdobePiStd /AdobePiStd findfont ct_VMDictPut
/AYCWKZ+AdobePiStd*1 
[127{/.notdef}rp /uni25CF 128{/.notdef}rp]
AYCWKZ+AdobePiStd nf
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
456.4 485.82 mo
(\177)sh
483.9 462.91 mo
288.98 462.91 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
481.83 464.73 mo
(\177)sh
404.67 441.82 mo
289.64 441.82 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
402.6 443.63 mo
(\177)sh
419.63 420.73 mo
289.64 420.73 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
417.56 422.54 mo
(\177)sh
366.36 399.64 mo
288.98 399.64 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
364.28 401.45 mo
(\177)sh
361.94 378.55 mo
288.3 378.55 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
359.87 380.36 mo
(\177)sh
342 357.45 mo
290.31 357.45 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
339.93 359.27 mo
(\177)sh
353.76 336.36 mo
290.31 336.36 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
351.69 338.18 mo
(\177)sh
350.77 315.27 mo
289.64 315.27 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
348.7 317.09 mo
(\177)sh
343.4 294.18 mo
288.98 294.18 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
341.32 296 mo
(\177)sh
325.05 273.09 mo
292.3 273.09 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
322.97 274.91 mo
(\177)sh
340.27 252 mo
289.64 252 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
338.19 253.82 mo
(\177)sh
360.87 230.91 mo
288.98 230.91 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
358.8 232.73 mo
(\177)sh
309.73 209.82 mo
288.98 209.82 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
307.65 211.63 mo
(\177)sh
349.31 188.73 mo
288.3 188.73 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
347.24 190.54 mo
(\177)sh
330.88 167.64 mo
284.31 167.64 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
328.81 169.45 mo
(\177)sh
350.23 146.55 mo
289.64 146.55 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
348.16 148.36 mo
(\177)sh
341.13 125.45 mo
290.97 125.45 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
339.06 127.27 mo
(\177)sh
328.74 104.36 mo
287.64 104.36 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
326.67 106.18 mo
(\177)sh
338.02 83.27 mo
286.97 83.27 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
335.94 85.09 mo
(\177)sh
351.37 62.18 mo
288.98 62.18 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
349.3 64 mo
(\177)sh
345.71 41.09 mo
290.31 41.09 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
343.64 42.91 mo
(\177)sh
381.14 20 mo
289.64 20 li
@
AYCWKZ+AdobePiStd*1 [5.24 0 0 -5.24 0 0 ]msf
379.07 21.82 mo
(\177)sh
%ADOBeginSubsetFont: Arial-ItalicMT Initial
ct_T42Dict begin
-0.516 -0.324 1.355 0.996
 256 array 0 1 255 {1 index exch /.notdef put} for  /Arial-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32efe77db1000000cc000000606376
74203de628370000012c000005606670676d54bf6d360000068c000005ce
676c79660e92094d000070fc0005af0c68656164daab66ef00000c5c0000
0036686865610e470d6300000c9400000024686d74786991277800000cb8
000027e06c6f63611c63139c00003498000027e46d6178700d2403ce0000
5c7c000000206e616d65815f997c00005c9c00000db77072657048530f70
00006a54000006a667646972000000000000000000000000000203880190
00050008059a0533001e011b059a0533005a03d1006602120805020b0604
020202090204e0000aff000078430000000100000000544d432000010020
fffc05d3fe570133073e01b2400001bfdff70000042605ba000000200004
05ba001905ba001905a6001a042600180000ffe70000ffe80000ffe7fe69
ffee05ba0019fe6fffe202e2000000b5000000b5000000000000000000bc
00bf008c00b300a600a600b10010010400640079008b008b00c100ea008a
00a2009101b40073007a00a400a200bb01bd0270005a00800017007000c3
00300103ffd000ac007d010d0006001200c900cd00560091ff8f0113000b
00190043007200b903c803d7ffee0146016e0002001b0044005200b603ee
00d80104023d05180573ff2d0005000900c600cd024cffe7001100150037
0049004e005c00a600a700b500c500db01280543ffdf0021004000530070
0079008e00a300ca018f0265027502a403c80555ff9affd7ffee00050008
002600460069007000730077009a00c100ef010a011301c101e50318049c
fef2fef9ffa4000000270034004100450075008000c400cb00d900e500f8
01550166022b0254037004050467ff16ffb40002001d0032004a004a004d
00550060007c007f008c009d00b102a3038cfec4fef7000100030003002d
00370037003a0056005a00a400cd00da0111011901250127014801530169
01a001fb02070239028102a402f7030503280328033603a303b503dd03df
03f10448047804e6060bff28ff4bff68ff78ff9fffbfffe10012001f0028
004c005a005c005e00610070007700810083008800b1009c009c009d009f
00a500b600b800b900ba00d300df00e100f200f7010e0132013b013c0166
016c017801ae01b501b701cf01d2025d026102a202cd0323035a03a303a4
040004440450047304d2fe00fe38fe8cfeb1feceff0effb2ffc7ffecfffd
0005001f002100250026002d00580065008100850091009900a500ab00af
00b000b000ba00db00dc00e900f80109010901100114011701240129012d
012f013601500151015a0167017401790182018e01900199019c01b001b3
01b701be01c501da01e801f001f201fb02000200020b020f021f0222022c
022d022e024e02670287029002ac02b502bc02bc02d002d402d802db02e5
02f102f9031103140314032203260348034a035c036f03780379037e03ab
03b503cb03e004040405040f0428042c048404a504af04cf04eb04f9050b
058e0593059805e505e506000610063d06500668069506b806d907030751
0766077e077f078207b60800082308ac00b200bf00b100af000000000000
000000000000025c00a100d301be00de01a6031402ab015002a70196010e
0318006b039b01d1054b0089023c02b0014d021603f301760176001503a9
01f400f400b6020402d8012b04a701a000bc01bd028c026b0278040f0157
04a904fd017404d2040302e400a602ee00000000061404a7000002760000
016d013e00000267006d009e021400cb02a40085007100c2009e06090290
00b9008f00260248003501490091009902ef00eb008e0011013f006a0079
00fd01a3057402a1017a03e8020c005601fd02df013b0574006606100081
01b3024e03cb01e400cd02bc0132014b01680239016200fd00e601a201e6
0255004d028300a3046705d401dd012b014e05680070000004e003490366
021302bb0000000000000000000000000000000000af00b4000300cd004c
03c8005c0192007200cd022b0049026f009d03bd01e900b4017c04670368
0099027802040183028102ac00b30348040b004200b403b400be01a803d6
012b00af0478016e0193ff45fd5d00f506a604ae03b10536041cffcafedc
01a501d0ffba02f10037ffca0355fe67019c04190055007c00e50072006d
000b00ab012b009c00db01a60008012b00250056008e00a5001500100109
00cb00460017004c005e01f200b80083001101360128004e0222006b0241
072006140000072700aaff370037006e002901da04a8007500ba40415440
3f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b0042651582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01182f
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
3623701020b802364520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab902a502a58a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b202020243604259b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b2021002436042595959592d0000000100000005147b1efab89e5f0f3cf5
0819080000000000a372c2bf00000000c94a4554fbddfd670adf07fb0002
0009000100010000000000010000073efe4e00430aaafbddfa520adf0021
000700000000000000000000000009f80600010000000000023900000239
00000239007302d701150473005f04730069071d00c7055600a101870104
02aa00ad02aaff93031d00ec04ac00b80239003102aa005f023900760239
ff98047300910473012f04730078047300700473005d0473008e047300ab
047300f8047300990473008a023900750239003104ac00b804ac00b804ac
00b804730104081f006f0556ffd70556005905c700ba05c7005b0556005c
04e3005d063900c705c7005602390075040000440556005b0473005206aa
005a05c70064063900bb05560058063900bd05c700600556009004e300ff
05c700c6055600fe078d01000556ffbf055600ef04e300320239000d0239
00ae0239ff8803c100900473ff7e02aa012a0473005a0473004404000073
0473006c0473006a0239005d047300350473004401c7003d01c7ff080400
004601c7003606aa004304730044047300640473ffeb0473006902aa0044
0400004e0239007304730080040000a205c7009f0400fffd040000000400
002802ac006b021400bc02acff5404ac00a40556ffd70556ffd705c700ba
0556005c05c70064063900bb05c700c60473005a0473005a0473005a0473
005a0473005a0473005a040000730473006a0473006a0473006a0473006a
0239007d0239007d0239007d0239007d0473004404730064047300640473
0064047300640473006404730080047300800473008004730080047300ba
033301110473009a047300400473003e02cd006d044c008e04e3004a05e5
005305e500530800011802aa015a02aa00ed0464007c0800ffad063900ae
05b4009a0464007c0464007c0464007c0473004b049c000c03f4003805b4
007a069600f1046400000231000002f600a702ec008f062500bb071d0057
04e3009904e300ac02aa007604ac00b8046400540473002e0464007c04e5
001a047300a104730053080001260556ffd70556ffd7063900bb080000a4
078d00810473fffc0800000002aa00d802aa00d601c7010801c701000464
008003f4007804000000055600ef0156fde80473005102aa006102aa0021
0400006f0400006f0473000b023900b901c7fff102aaffd8080000880556
ffd70556005c0556ffd70556005c0556005c023900750239007502390075
02390075063900bb063900bb063900bb05c700c605c700c605c700c60239
007d02aa00cd02aa00c002aa00c902aa00db02aa018e02aa014802aa004d
02aa00b002aa004002aa01080473001801c70026055600900400004e04e3
003204000028021400bc05c7005b04730064055600ef0400000005560058
0473ffeb04ac00b804ac010502aa011702aa009802aa00a906ac007b06ac
00ab06ac00a90473ffe8063900c70473003502390075055600900400004e
05c700ba0400007305c700ba040000730473006c046b00b502aa01360556
ffd70473005a0556ffd70473005a05c7005b0500007005c7005b0556005c
0473006a0556005c0473006a0473005201c7003604730052024000380473
00520333003605c700640473004405c7006404730044063900bb04730064
05c7006002aa004405c7006002aa0044055600900400004e04e300ff0239
001b04e300ff02d5006d05c700c60473008005c700c60473008004e30032
0400002804e300320400002804900057063900bb06b200b4049000660472
00620384004504d3006402fe00b00538006f046bff7e0400007302eb0077
08c000190800004f040000990800004f040000990800004f040000980400
009807d5016a05c000ee04ac00b804d5009d04ac007104d5022204d50105
05abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e05ab
ffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905ab02d6
05ab006605abffea05d5ffff04d500920800000007eb013007eb012007eb
013007eb012004d500b204d5008004d5002a082b0198086b01b807550010
060000f40600006f0440003a0540003704c0003f04150040040000250600
005505de0075038d003b04eb00650180010402d50115071500b802960019
04d5009202d6008302d6008304d500b202d600700556ffd70473005a05c7
00ba0400007305c700ba040000730556005c0473006a0556005c0473006a
0556005c0473006a063900c704730035063900c704730035063900c70473
003505c700560473004405c70056047300440239007501c7003d02390075
01c7003d0239007501c7003d0239ffdc01c7ff960400004401c7ff080556
005b04000046040000460473005201c7ff6e05c700640473004405c90062
04730049063900bb04730064063900bb0473006405c7006002aaffc70556
00900400004e04e300ec0239001805c700c60473008005c700c604730080
05c700c60473008005c700c604730080078d010005c7009f055600ef0400
000001c700360556ffd70473005a0800ffad071d0057063900ae04e30099
02390128078d010005c7009f078d010005c7009f078d010005c7009f0556
00ef0400000001c7013302aa00990473004004cd005a06ac007b06ac0094
06ac009306ac006302aa002602aaffe002aa017b02aa00610556ffd4064f
006306c50068031c0062065a005706ec00600633001b01c7ffee0556ffd7
05560059055effec0556005c04e3003205c70056023900750556005b0556
ffec06aa005a05c7006405300008063900bb05cc00570556005804cc002d
04e300ff055600ef0556ffbf06a500fd0616000702390075055600ef0490
0066038400450471004501c7003d046600960492ffe90400009e03b50064
047100450457008201c7003d0400003c03f0ffcd0462ffe8040000a20393
0073047300640495ffe403e4006f04660096045eff6d05d2009c063b0064
01c7003d046600960473006404660096063b00640556005c06be00e7045a
005705a900bb055600900239007502390075040000440887ffea07dc0057
06c100e504b70057051d00e705ca00570556ffd70535005705560059045a
005705a2ff7f0556005c0756ffb704e9006305b9005705b9005704b70057
057cffeb06aa005a05c70056063900bb05cc00570556005805c700ba04e3
00ff051d00e7065c00a40556ffbf05d10057056300db075d005707620057
067100e70717005705350057058d005a082e00570574ffca0473005a0480
0076042d006403f2004e046c00640473006a0581ffc503b8001f04730080
0473008003c7003f0483ffd8057c003f0467003f047300640467003f0473
ffeb0400007306aa00430400000006af005f0400fffd0493007d04240097
06a4007906cf007904f8007905e3003f0435003f03ef00350604003f0446
ffe80473006a047300450306003f03f700610400004e01c7003d01c7003d
01c7ff080748ffd8069f003f0473004503c7003f040000000473007d03f0
005702b7003f0800005108aa005b055c00ac0000003f0000ff930000ffa2
0000ffa2000000760000fff30000fff30000fffd0000fffd000001c00000
ff850000012e00000053031000f10000014a02330082000003ca0000ffc3
0239006d0481001d0456ffe60331ffcd041100a104d1005601f9004f030f
00b304ca004f04b8008b01f900bc041300a903b0000703b400b004ca004f
04cf002301f9fff802d2fff00498006c043cffd30488009c045f003303b1
00af03d4fff304660003041300a9058e00a20524ffe103f2004f03f200bc
03f200bc01e3009e0356009e0686004f01f9009b041300a90413007003b4
001703b400170448ffe1058e00a2058e00a2058e00a2058e00a20481001d
0481001d0481001d0456ffe60331ffcd041100a104d10056024b002d034a
003904b8008b024b004e041300a903b0000703b400b004cf002302d2fff0
0498006c0488009a045f003303d4fff304660003041300a9058e00a20524
ffe101f9004f0456ffe603b00007045f0033049b00370000ffdc0000ff25
0000ffdc0000fe510000ffdc0000fe510000ff160000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ffdc0000ff16
0000ffdc0000ff200000ffdc047300a408000000067e00bb04d600640659
00c6051200800000fef40000fd410000fdb70000ff580000fdec0000fe3b
0000ff2e0000ff380000fe090000fd760000feb30000fd0e0000fd660000
ffec0000ffc40000fe44041b005606ac007b06ac007b0000ff6a0000fdb8
0000feca0000fdc80000ff2d0000fdc70000fced0000fc0e0000fc0e0000
fd140000fc910000fc7c0000fc920000fc460000fc000000fc460000fbdd
0000fef40000ff500000fe7e0000fc6a0000fc950000fdf70000fe330000
fc990000fcf90000fcef0000fc9f0000fc8b0000fbde0000fd2c0000fd4b
0000fc780000fc6801c7003d0556ffd70473005a0556ffd70473005a0556
ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473005a
0556ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473
005a0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c
0473006a0556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a0556005c0473006a0239007501c7003d
0239003801c7ffe8063900bb04730064063900bb04730064063900bb0473
0064063900bb04730064063900bb04730064063900bb04730064063900bb
04730064067e00bb04d60064067e00bb04d60064067e00bb04d60064067e
00bb04d60064067e00bb04d6006405c700c60473008005c700c604730080
065900c605120080065900c605120080065900c605120080065900c60512
0080065900c605120080055600ef04000000055600ef04000000055600ef
040000000556ffd70473005a0239007501c7003d063900bb0473006405c7
00c60473008005c700c60473008005c700c60473008005c700c604730080
05c700c60473008000000030000000300000003000000030045a003e0306
003c0756ffb70581ffc504b7005703c7003f04b7005703c7003f05c70056
0467003f047300ea040000a2047300870400fff40556ffbf0400fffd0563
00c6042400810563007504730044063900c104730076063900bb04730064
01f900a10000000002bc000003f2008c0473004405d8008c053500570473
0044053500570473004405c700a005c700ba0400007305c7005b0646008c
0535003b0473006c047200000556004404e9006604e3ff2a063900c703f9
00890709004401c70036023900620556005b0400004601c7003603f0ffcd
06c5007005c7ff3004730044063900bb06f200bb0557006405d8008c0473
ffeb05560058055600820400005704cc002d02aa00c80239ffe404e300a0
0239007304e300ff061600bf05c700c605bd00d10400000004e300320400
002804e3ffba04e30033040000110400fffa04730078041500490381000a
0400006b0473ffeb021400bc034e00bc04ac0072023900730aaa005b09c7
005b0873006c08730052063a0052038e003609c70064078e0064063a0044
047300760556ffd70473005a0000fff90556ffd70473005a0800ffad071d
0057063900c704730006063900c7047300350556005b04000046063900bb
04730064063900bb0473006404e3ffba0400ffae01c7ff080aaa005b09c7
005b0873006c063900c7047300350846005604f1000405c7006404730044
0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c0473
006a0239007502390036023900750239007d063900bb04730064063900bb
0473006405c7006002aa004405c7006002aa004405c700c60473008005c7
00c604730080055600900400004e04e300ff02390061045cffd6037effb5
05c7005604730044055a005604d6006404d6006404e30032040000280556
ffd70473005a0556005c0473006a063900bb0473006400000035063900bb
04730064063900bb04730064063900bb04730064055600ef040000000473
00880473006c04730044047300440400003c040000100473006c0473006c
0473007105a200760384004503b8001f04ed001f041200640239ff380473
00350473003504670064040200a604ef007c0473007c0473004404730044
01c7001f01c7003e02d9000001c7ffcf01c7fff001c700070482003006aa
006d06aa006d06aa00430473ff100473004404a9003f0473006406200064
063b00640473006402aaffb002aaffb002aaffb002aaffed02aa001502aa
004402aa007504460044044600410400ffd70253ff380271ff3802510059
02c8ff330239002b0239001c047300420481005b046600960400ffd305c7
ffd30400ffdd041e009504000028046100280400ffae0400ffcc040000ca
040000c70400003704000023063900bb0418004404120059046700640467
003f0258ff1f0400ffd703950044047300690400003d04000083076b006c
073e006c07c7006c055e007603b0007305ab00730602005d0522003604bf
003603e20064043800130277003a0277003a00faffa201c1003a01c1001e
01c10027029d003a041400d302c9004f0187010402d7011501c7010801c7
010001c7013302aa01c002aa01ad02d900de02d900d504ac00b804ac00b8
04ac00ad04ac00ad02aa01d902aa015a02aa012a02aa012102aaff9502aa
005e02aafffb023900700239015202aa00fb02aa00fb02aa00a602aa00a6
02aa00a602aa001002aa000202aa00a202eb00d600be00400299006302b1
004002d900d5031000960310009603100096031000960310009602aa0062
02aa006202aaffc702aa00c902aa00d60457009604570096045700960457
00960457004304570043045700430457004304570043031000430457002f
0457002f0457002f0457002f0457002f0310002f04570025045700250457
002504570025045700250310002f0457001a0457001a0457001a0457001a
0457001a0310001a04570042045700420457004204570042045700420310
004204570096045700960457009604570096045700420457004204570042
0457004204570042031000420457002f0457002f0457002f0457002f0457
002f0310002f0457002f0457002f0457002f0457002f0457002f0310002f
045700260457002604570026045700260457002603100026045700420457
004204570042045700420457004203100042045700960457009604570096
045700960457004204570042045700420457004204570042031000420457
002604570026045700260457002604570026031000260457002304570023
045700230457002304570023031000230457002f0457002f0457002f0457
002f0457002f0310002f0457004b0457004b0457004b0457004b0457004b
0310004b0457009604570096045700960457009604570042045700420457
00420457004204570042031000420457001a0457001a0457001a0457001a
0457001a0310001a04570024045700240457002404570024045700240310
00240457002f0457002f0457002f0457002f0457002f0310002f0457004e
0457004e0457004e0457004e0457004e0310004e04570096045700960457
0096045700960000ff780000ff6a0000fea20000ffb30000003f0000ff9b
000000150000ffac0000ffd000000091000000250000ff140000ffb30000
ffb3000000200000001100000045000000df0000fedc0000fea70000fee2
0000fef00000ff7d0000ffbb0000ff2c0000feec0000fee90000fee30000
fe400000fe1b0000ff210000fe460000fec60000fee70000fe9b0000fef5
0000ff630000fe210000fe500000fe690000fe260000fe640000fe640000
fe190000fe400000fd1b0000fe5d0000fe950000fea90000fd980000fe16
0000fe620000ff2c0000fe210000fedb0000fe3a0000ffca000000540000
fe6d000000100000ffe70000ff6f0000000d0000ff160000fefb0000ff26
0000fd8d0000feea0000fee70000ff6f0000ff6f0000ff6f0000fe980000
fedf0000fd1f0000ff310000ff2b0000ff530000ff000000ff010000ffc9
0000fef10000ff0e0000ff1d0000ff130000fee10000fe210000ff400000
ffce0000ff4c0000fed002aa015a02aaffe902aa004f040a00430466003c
05ba00ef070e007c05ba00ef04730064063b00640482ffd3063900bb0473
006405c700c80400003704e3005d0306ffe904ff006a043c0056060d00b4
049d00f506c5ffe406aaffe1056300dc047300b20563002b0419ffc80556
00820556008204e0007d04c5008805f700bb046e00640352003302de0045
0482ffd304a200640400007301c7ff08063900bb03870064038700110556
005c05b900570473006a047300800a6a00bb04c2006106140044063b0044
07390043058e00440558ffa50400ffbd070600420572004306a1001d057b
00430831004306d9004404e9004903b8fffd06a5011a05d200c5063900bb
04730064061400fe04b800a2061400fe04b800a208de00bb07590064069f
005004cc001e0a4200bb070200640000feca0a6a00bb04c2006105c700ba
04000073047300390000ff5a0000ff5800000050000000320000fc2b0000
fc4c05b9005704730080053500570435003f055600580473ffeb0528004b
0434004404e9006303b8001f04b7005703c7003f05f100e7048a00790721
0056059b003f08b3005706b7003f05c7008b0400005105c700ba0400006c
04e300ff06aa0043072e00e7052900b0056300db0424009706cd00400514
001f06cd00400514001f023900750756ffb70581ffc50504004b0428002a
057cffeb0483ffd805c7004b0467002a05c700560467003f056300db0424
009706aa005a057c003f02aa00db0556ffd70473005a0556ffd70473005a
0800ffad071d00570556005c0473006a063900c1047300760756ffb70581
ffc504e9006303b8001f04e900630400ffae05b900570473008005b90057
04730080063900bb04730064063900bb04730064058d005a03ef0035051d
00e704000000051d00e704000000051d00e704000000056300db04240097
0717005705e3003f055600490473006c079d004906ab006c077f0108061c
00b804e9010803b800b807d8ffeb06c4ffd8081a005606a5003f063900c7
0467006405dc00ff08ea00430000fec30000ff7900000033000000700000
fffb0000feb9000000320000ffd40000ff7c0000ff700000feb2000000b0
000001360000ff6e0000fe6c000000de0000003d0000fee50000feec0000
feb40000fde20000fef5000000100000fec70000fece0000001d00000021
0000ff7a0000fe9500000041000001ac0000003000000030000000060000
00060000009400000074000000300556ffd70473005a0556005904730044
0556005904730044055600590473004405c700ba0400007305c7005b0473
006c05c7005b0473006c05c7005b0473005f05c7005b0473006c05c7005b
047300560556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a04e3005d0239005d063900c704730035
05c700560473004405c700560473004405c700560473004405c7fffd0473
fff305c70056047300440239ff4501c7fef5023900750239007d0556005b
040000460556005b040000460556005b040000460473005201c7ffe80473
005201c7ffe80473005201c7ff220473005201c7feff06aa005a06aa0043
06aa005a06aa004306aa005a06aa004305c700640473004405c700640473
004405c700640473004405c7006404730044063900bb04730064063900bb
04730064063900bb04730064063900bb04730064055600580473ffeb0556
00580473ffeb05c7006002aa004405c7006002aafff205c7006002aafff2
05c7006002aaff39055600900400004e055600900400004e055600900400
004e055600900400004e055600900400004e04e300ff0239007304e300ff
0239003804e300c90239ffa804e300ae0239ff7005c700c60473008005c7
00c60473007d05c700c60473008005c700c60473008005c700c604730080
055600fe040000a2055600fe040000a2078d010005c7009f078d010005c7
009f0556ffbf0400fffd0556ffbf0400fffd055600ef0400000004e30032
0400002804e300320400002804e3003204000028047300440239007305c7
009f040000000473005a01c7003604900066049000660490006604900066
049000660490006604900066049000660556ffd70556ffd7068200b80682
00d2068200b8068200d2068200e3068200e3038400450384004503840045
038400450384004503840045061e0082061e00ab07ae00a507ae00bf07ae
00a507ae00bf047100450471004504710045047100450471004504710045
0471004504710045068f0082068f00ab081f00a5081f00bf081f00a5081f
00bf081f00d0081f00d001c7003d01c7003d01c7003d01c7003d01c7003d
01c7003d01c7003d01c7003d03010082030100ab049100a5049100bf0491
00a5049100bf049100d0049100d004730064047300640473006404730064
0473006404730064069d0082069d00ab082d00a5082d00bf07c900a507c9
00bf04660096046600960466009604660096046600960466009604660096
04660096068200ab07ae00bf081200bf07ae00e3063b0064063b0064063b
0064063b0064063b0064063b0064063b0064063b0064067a006b067a006b
080a00a5080a00bf07a600a507a600bf07a600dc07a600dc049000660490
00660384004503840045047100450471004501c7003d01c7003d04730064
047300640466009604660096063b0064063b006404900066049000660490
006604900066049000660490006604900066049000660556ffd70556ffd7
068200b8068200d2068200b8068200d2068200e3068200e30471ffeb0471
ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb068f0082
068f00ab081f00a5081f00bf081f00a5081f00bf081f00d0081f00d0063b
0064063b0064063b0064063b0064063b0064063b0064063b0064063b0064
067a006b067a006b080a00a5080a00bf07a600a507a600bf07a600dc07a6
00dc04900066049000660490006604900066049000660490006604900066
0556ffd70556ffd70556ffd70556ffd70556ffd702aa016702aa004f02aa
016702aa00c002aa00ed0471ffeb0471ffeb0471ffeb047100450471ffeb
068200d10682007c06f300d106f3007c05c7005602aa00b802aa00b802aa
00e301c7003d01c7003d01c7003d01c7003d01c7003d01c7003d02390075
02390075036500d10365007c02aa00d202aa00d202aa00e3046600960466
009604660096046600960495ffe40495ffe40466009604660096055600ef
055600ef068200a906e6007c061e00ab02aa006102aa006102aa012a063b
0064063b0064063b0064063b0064063b0064076500d1069d007c074200d1
067a006b0616000702aa015a02aa01900473006105c7008f05c700ba06aa
004305c70043090a0060078d002f0556005b04e300a30800ffd70400ffd3
04c100660000ff2b0000ff610000ff320000ff4401c7001f01c7ff08042b
ffa1055600580506006c025aff1f0508004402c8ff8d0555007505550075
02aa001e02aa001e02aa005002aa005002aa003002aa00ac02aafffe02aa
ffce02aaff7b023900b702aa018602aa018602aa002602aa0026032effbe
032effbc02aaffc80000003b0000004a0000ff910000fec20000fefb0000
fefb0000fe410000004a0000ff7b0000ff530000fea2055600580473ffeb
03ffffd205bcff9e071d00570401004004000073047100440471002903c5
004403b8001f01c7ffd6035000150400003c03950022057c003f04b0003f
047300640400003c047300300400fff704e3001c078d008103a8003c0473
006e04730064044800440446ffe804460044041d00cb0466009604730020
0595002304730020040000a205c7009f0400002803b8001f03b8005704db
fff80306003f0400ffd30467003f0448004405d200d40483ffd803ee005d
05bd004803a1007a03a1007a03d0007a039d007a039d007a03eb00a203cf
007a0149007a02ac007a0399007a0302007a046f007a03c9007a03cb007a
03f900a2030f008a0381007a03a7007a032c00de038d00a3052000ea02de
006e02de009602d400ab04bd009f027e003a032c00ab031900ab031900ab
0250007c025000600322008300ff00250286003a03ff003a0275003a0328
00ab02d7008d032800a7032800b302ef0014019000a202d4008f03bc00d0
0435007802dc00cc0388006e0330002802f000da030c00a203810099030c
fffb00ffffe20187ffb002d4000c02dc00510330ffb702f0005e0309ffe9
03810012030cff7305ad001d053d00a105fd005604dc000704e000b005f6
004f053f00a90650ffe104ac00670000fd850000fddb0000fde30473fffc
02aa00ec02d5006e0400000008000000040000000800000002ab00000200
0000015500000473000002390000019a000000ab00000000000005e50053
05c700ba06aa0052057cffea074d00800711006c070c00690556ffd705c7
005f0400ff860473003d04e3ffc1040000600400002604a500c600000102
0000fee50000fe590000000b0000ff530495ff8f05c700a005c700ba05c7
00a0045a00570306003f0000fece0000ffc30000ff4202d200240000fee1
047300440473006c0239ffd006aaffd00473ffb80473ff1c02aaffa002aa
ffa00400004e0239ffc0040000280473ffef030b007a047400050618ffe2
01c7001f01c7001f0473ffeb0466003f04810021047300440473006c0239
ff83058200350400004601c7ff5b06aa0043047300440473ffeb02aaff6f
0400004e0318ff38040000a20400fffd040000280473005a0473006c0473
006c0473006a0384004503b8ffb30514007601c7003d0400ffcb0253ff56
04730080045cffe40309008002da00a702da0068032900a60250006001a5
009701a5ffea0322008302d600b400ff004b00ff006200ff006200ff004b
01e1000400ff003e00ffffce026d006403ff003e03ff005a0275ff6f0275
003902d20052032800b1032800a802c000370187ffe30190004802750038
033700ac027500730275007102dc0047029f004c029f004c02f0004c02bc
002b032900b70000ff6d0000ff8e0000ff0a0000ff830239006f02de000f
0319003103280030030c000b03190023063900c70556ffd70556005805c7
00ba02aa0012049000660490006604900066049000660490006604900066
049000660490006601c7003d01c7003d01c7003d01c7003d01c7003d01c7
003d01c7003d01c7003d0466009604660096046600960466009604660096
04660096046600960466009601c7003d01c7003d01c7003d01c7003d0466
009604660096046600960466009603a0007b0556001f05c700780556ffec
0556005a0473ff860400004401c7ff08060a00bb0473006905c7000c02aa
00330556009f040000000400003c040000730400003c01c70036045aff83
0306ff610556ffbf0400fffd0556ffbf0400fffd04e9006603840045057c
ffd504abffd80000ff5d0000ff9f0000ff980000ffc70000ff2a0000ff27
0000fee4000000330000fe51078b002303eb000b0400003c0473002201c7
00310473ffee0556005805c7002f0473ffb80239ff3705c7005604730044
0556005b0400004604e30032040000280400006b04d000560383003f0538
006f0000fffd000000250000ffcc0000ffa80000ffb00000fee201c7003d
05c9005605c7006405c900ad0000fec00000ff210000feb30000feba0000
feb80000feb70000febd0000fed90000fec50000febc0000fea3063900bd
04730069078d010005c7009f056200560000ff84060a00bb04d000a0084c
010006ba009d0239009d038000cc018700d0018700fe0400009904000099
0239012a0239012c023900d002aaff8804e300c4047300ad000000000000
007400000074000000740000007400000104000001340000029800000498
000005ce000007880000081c0000089200000918000009e800000a580000
0ad000000b0c00000b3e00000b8800000c6e00000d2c00000e3800000f50
000010ae000011e8000012fe00001392000014d200001602000016560000
16f80000177c000017da000018620000193600001b1e00001c0000001d56
00001e5a00001f58000020520000212c0000226a00002380000024300000
251e00002654000026ec0000299a00002b4c00002c5400002d4a00002ed8
00003042000031c00000328a000033760000344600003614000037dc0000
38fe000039fa00003a7c00003ace00003b5200003bce00003c0200003c5c
00003dc000003f2c000040120000412200004252000043640000451c0000
4684000047e0000048f600004a9400004bae00004d7a00004eb800004f98
000051000000525a0000538a00005502000055e200005736000058060000
598200005ad600005bbc00005cba00005dee00005e3000005f7c00006018
0000604a0000607a000060a8000060da0000610a000061500000618c0000
61bc000061ec0000622a0000625c0000628e000062c2000062ee0000631e
0000634e00006382000063bc000063ea0000641e0000644c0000647e0000
64b4000064e400006518000065520000658e000065c60000660e00006640
00006686000066cc000067b000006834000069b000006af200006c660000
6cbc00006d3800006e9200007034000071c8000072b20000731600007374
000074ba00007608000077be00007924000079b400007a5c00007b200000
7c9800007dec00007ed200007fb00000801c000080f4000081dc0000832c
000083bc00008506000087080000889a0000898000008a0c00008a580000
8b1400008c4200008d8600008e0800008ea800008f4000008fc800008ff8
0000902a00009060000091fe000093b4000093ea0000941a000094f20000
95f60000967a00009710000097a4000098420000987c000098b200009916
00009a3a00009aa400009b0600009c9e00009e1200009f5400009f840000
a0000000a1000000a29e0000a2da0000a3100000a3400000a3800000a3b2
0000a3e20000a41e0000a4500000a4820000a4b20000a4e60000a5160000
a55e0000a59a0000a5cc0000a6b80000a72a0000a7c40000a8100000a878
0000a8b80000a9420000aa2a0000aac40000ab260000ab9e0000ac8e0000
ad9c0000add60000ae080000ae3a0000ae700000aede0000b0260000b1a0
0000b1d00000b2120000b3140000b4380000b4700000b56e0000b6160000
b6e20000b7d60000b9600000bb2c0000bd5a0000be740000bea60000bed8
0000bf080000bf3a0000bf720000bfa20000bfd20000c00a0000c0400000
c18a0000c1cc0000c1fa0000c22c0000c25e0000c2840000c2aa0000c2dc
0000c4340000c57c0000c5a40000c5ca0000c6020000c6320000c6620000
c6940000c7820000c8720000c8a40000c8e80000c91a0000c94c0000c986
0000c9bc0000c9ee0000ca200000ca500000ca7e0000cab40000cae60000
cb160000cb460000cb6c0000cb900000cbc40000cce40000cd180000cd5e
0000cd900000cdd60000ce140000ce460000ce780000cea80000cf220000
d01a0000d1660000d2580000d34e0000d4100000d4d20000d54a0000d682
0000d6f60000d71e0000d8340000da820000dac20000db020000db420000
db800000dbde0000dc3c0000dcaa0000dcca0000dd980000de240000de5a
0000deae0000def80000df420000df5e0000df7a0000df9a0000dfba0000
dfda0000dffa0000e0200000e0460000e06c0000e0920000e0c20000e0ea
0000e1120000e13e0000e16a0000e19e0000e1c80000e1f40000e22a0000
e2540000e2800000e2b60000e2e00000e30a0000e33e0000e36e0000e3a2
0000e3e60000e4160000e44a0000e48c0000e4c00000e4f20000e5340000
e5680000e5980000e5da0000e61e0000e6640000e6c00000e6dc0000e6f8
0000e7140000e7300000e74c0000e8ba0000eb660000edd60000edf20000
ee0c0000ee280000ee440000ee600000ee7c0000eed80000ef120000ef7c
0000f0460000f0e60000f1bc0000f23c0000f2c40000f3340000f3ca0000
f4280000f46e0000f4cc0000f52e0000f55e0000f5ae0000f5ec0000f5fc
0000f62c0000f7600000f88a0000f8b40000f8d00000f8fc0000f9340000
f9800000f9b00000f9e00000fa140000fa4a0000fa7a0000fab00000fae0
0000fb100000fb400000fb800000fbb00000fbe00000fc100000fc400000
fc700000fca00000fe180000ffd4000100080001003c0001019a00010314
0001034400010376000103aa000103dc0001042c000104680001048c0001
04b2000104e6000105fa00010620000106480001075000010776000107a0
000107c6000107ec000108f400010a4e00010a8800010ab800010af80001
0b3a00010b6000010b9600010bca00010bfa00010cda00010e4200010e72
00010ea200010ed200010f0200010f3800010f6c00010f9200010fb80001
0fee0001101e0001104e00011082000111280001117c000111aa000111da
0001120a0001123a0001126a000112a0000112d000011300000113300001
136000011394000113c8000113f8000114280001149e000114ca00011652
00011708000118ca00011aa000011c6c00011dda00011e4000011ec00001
1f0800011fac000120d6000121c2000122e00001238a0001248e000125b2
000126f2000127260001273600012746000127ec000127fc0001280c0001
281c0001282c0001283c000128ea000128fa0001290a0001298800012998
00012a5800012a6800012b1a00012b2a00012b3a00012b4a00012cb20001
2dba00012dee00012e2600012e5600012e8400012eb400012eec00012f22
0001308c0001316c0001322e0001335600013430000134aa000135ae0001
365a0001378c0001379c0001389e000138ae000139ae00013a8600013b88
00013c7a00013dde00013ed800013f1000013f4e00013f7e00013fb40001
3fea0001401e0001413600014166000142660001427600014286000142ba
000142ca00014404000145380001463e0001466e0001469e000147d40001
47e4000148ae000148be0001493000014a5600014a6600014c3200014d3e
00014e2800014e5800014f900001508a0001509a000150aa000150ba0001
50ca000150da000150ea000150fa000151dc000152f6000153060001542e
0001552a000156460001579e000158700001599400015a6200015b4e0001
5c8200015d9400015da400015e9c00015f8a0001608e0001616400016174
0001635c0001646200016472000164a2000165be000166a20001680e0001
68ec000168fc000169aa000169ba000169ca000169da000169ea00016b96
00016ba600016d0000016de200016f6a0001715e00017228000173460001
740a000174f60001761e0001771400017748000178e4000179a000017a84
00017a9400017aa400017ad600017ae600017c3200017d6600017ec80001
7ef800017f280001807600018142000181da0001820a0001840c000184dc
000185640001867800018720000188280001887600018900000189bc0001
89ee00018a6800018ab400018b9a00018bec00018c4000018c7a00018cd0
00018d5400018da000018df400018e6000018fea000190c8000191ca0001
92440001938400019420000194f2000196080001972c000197ae0001989e
0001996200019a3a00019b4e00019cae00019d3a00019e0600019efc0001
9fa80001a0da0001a2160001a31e0001a41a0001a5080001a5da0001a70e
0001a8480001a90e0001a9f00001aae40001ab340001abdc0001ad6c0001
adb80001adfc0001ae3e0001ae880001af1c0001afce0001aff40001b01a
0001b09a0001b11a0001b1460001b1720001b1c80001b2000001b2640001
b2a00001b2dc0001b35e0001b3bc0001b4000001b46c0001b4aa0001b4f6
0001b55c0001b5a20001b5f00001b6360001b7ec0001b9b20001ba0a0001
ba5a0001ba9a0001bb080001bb700001bba00001bbc60001bbea0001bc16
0001bdee0001be140001beb20001bf120001bf700001bfa00001bfd00001
c0200001c0700001c0b00001c1220001c1760001c1d40001c22a0001c260
0001c2a20001c2e80001c3320001c3620001c39a0001c3ca0001c5420001
c8880001c9a00001caba0001cc0e0001cd6a0001cdb80001ce060001ce6a
0001ceb80001cf060001cf780001d0840001d1660001d2540001d3340001
d4140001d4d20001d5c20001d66a0001d7320001d7720001d8fe0001da8a
0001dc3c0001dca80001dd140001dd700001ddce0001dec20001dfbc0001
e08c0001e15c0001e22c0001e3100001e3f40001e4d80001e4ea0001e4fc
0001e50e0001e5200001e5320001e5940001e6060001e6ea0001e6fc0001
e70e0001e71e0001e72e0001e7400001e7520001e7640001e7760001e788
0001e79a0001e8580001e91a0001e9d80001ea9a0001eb100001eb380001
eb600001eb880001ebc80001ec180001ec780001ecbe0001ed0c0001ed56
0001edae0001edfe0001ee540001eea20001eef20001ef4a0001efb20001
f0080001f0620001f0d00001f11c0001f15c0001f1a60001f1f20001f236
0001f2620001f2900001f2d40001f31e0001f3520001f3880001f3dc0001
f4300001f4760001f4ba0001f5080001f55a0001f5a80001f5f60001f64c
0001f69a0001f6d40001f7160001f73e0001f7660001f78e0001f7be0001
f7ee0001f8340001f8820001f8de0001f9220001f96c0001f9b40001fa0c
0001fa540001faa60001faf00001fb440001fb7e0001fbb20001fbe20001
fc120001fc420001fc860001fcb80001fcf00001fd180001fd4a0001fd72
0001fda00001fdc60001fe160001fe520001fe9c0001fed00001ff0a0001
ff3a0001ff940001ffce0001fffe00020026000200540002007c000200a2
000200e80002013e00020174000201a4000201d8000202080002024a0002
0296000202c6000202f60002032600020360000203940002040000020434
00020496000204ca0002053000020564000205c6000206860002076a0002
08900002097600020a2400020ad400020cd800020ed40002103c00021188
0002138a000215540002161e000216f20002179e0002186c000219340002
1a2200021b2800021c0200021d3200021e5200021f2200021f3200022050
0002214c0002225a0002235c00022374000223a6000223d4000223ec0002
25720002268e00022766000228880002298200022ab200022ba000022cec
00022df600022e0600022f0600022fb4000230e600023200000232800002
339e00023446000235b8000236ca0002381400023824000238be000239d2
00023aba00023b6c00023c5600023d7a00023e7a00023f5800023f680002
40a2000241bc0002429e000243d0000244be000245d0000246f600024706
000247da000248ec0002496600024a7a00024b1400024c2000024cfc0002
4dca00024eaa00024f7c0002503e0002512e0002521c000252fe00025440
0002557a000256760002574a000258a400025998000259c400025a0c0002
5a8a00025a9a00025adc00025b1e00025b6200025b8800025bb000025bda
00025c0200025c2c00025c5600025c6600025c9a00025ce800025d620002
5d9200025dde00025e0e00025e3e00025fb2000261020002613200026162
00026192000261c2000261e80002620e0002625000026292000262c20002
62f200026320000263460002636c00026394000263c4000263f400026518
00026602000266320002666200026696000266ca000266fa0002672a0002
675e00026792000267c2000267f2000268260002685a0002688a000268ba
000268ee000269220002695200026982000269b6000269ea00026a1a0002
6a4a00026a7e00026ab200026ae200026b1200026b3800026b5e00026c86
00026dbc00026e8c00026f7c00026fac00026fdc0002709a000271f00002
7320000273bc0002745400027484000274b40002758e000276c8000276fe
0002774c000277f00002782400027882000278b2000278e2000279120002
795e0002798e000279be00027ad600027be000027d0800027e5e00027f2e
00028076000281c400028312000283e80002854a0002855a0002856a0002
86ac000287980002886200028a0200028a1200028afc00028c0400028d6c
00028e3400028f3a0002907400029136000291bc00029244000293360002
93f20002947200029576000296ae000297d60002991800029a0e00029b0a
00029bfc00029c0c00029d4600029e8800029fc40002a03c0002a0bc0002
a1860002a21c0002a2e60002a3700002a3e60002a4cc0002a5d00002a760
0002a80a0002a8fa0002a9a60002aa980002ab6e0002ac400002ad800002
ae840002af580002afc20002b0d40002b15a0002b2060002b2d40002b3aa
0002b4a40002b5fa0002b6ca0002b7a80002b88c0002b9700002ba8e0002
bb680002bc620002bd900002bda00002be820002bf480002bf9e0002c0e6
0002c1f80002c30a0002c4860002c6540002c8360002c9c80002cb380002
ccfa0002ce900002cff60002d09e0002d2b80002d3740002d43e0002d538
0002d5e80002d6880002d71a0002d7d80002d8e20002da100002dad40002
dae40002daf40002db040002db140002db240002db700002dbbc0002dc1e
0002dd080002dd180002dd280002dd920002de000002de2c0002de3c0002
de4c0002de780002deae0002def00002df380002df820002dfb00002dffa
0002e0440002e07a0002e0b20002e0fa0002e12a0002e1820002e2440002
e3640002e3a80002e4ea0002e5b00002e69a0002e6d00002e7140002e758
0002e79c0002e7d20002e8040002e8460002e8b00002e9020002e9120002
e98a0002ea100002ea800002eae20002eb680002ebc80002ec320002eca6
0002ed160002ed740002ee1a0002eeb20002ef1e0002efac0002f0060002
f0740002f11e0002f1c40002f25a0002f2ca0002f34c0002f3b00002f45c
0002f51a0002f5c60002f6580002f6b60002f7220002f7780002f7fa0002
f8780002f8fe0002f98a0002f9e40002fa500002fac00002fb2e0002fb9e
0002fc220002fcb20002fd180002fd920002fe0e0002fe860002ff2c0002
ffc400030054000300b200030150000301cc0003025e00030302000303ac
00030444000304a0000304f40003055c00030602000306ac000307760003
081c0003087e000308d600030936000309c400030a4a00030ad800030b38
00030b9c00030c0600030c6e00030cd600030d4e00030dd600030e6a0003
0ed600030f3e00030fa20003104e0003110e000311bc0003124a000312a8
000313140003138400031428000314ce0003159200031634000316980003
17280003179a00031832000318b00003192a0003199600031a2400031a80
00031ade00031b6400031be000031c4800031cac00031d0000031d6e0003
1dd600031e5400031eca00031f4400031fc40003202000032086000320ea
0003218a0003222c000322ea0003239a000323f60003246e000324cc0003
2556000325ee0003267c000326e200032740000327ce00032840000328da
0003296e000329de00032a4e00032ac600032b2400032b8400032bfe0003
2c5800032cb800032d1200032d6e00032dd600032e3400032e6200032e8e
00032eda00032f0800032f5200032fba00033038000330a2000330ce0003
311000033182000331ee00033236000332480003325a0003326c0003327c
000332bc00033302000333380003336e000333a0000333ee000334380003
346e000334a4000334ea0003351e0003358c0003360000033648000336ac
000336fe00033710000337220003374c00033786000337f20003385a0003
38b80003390200033948000339c2000339f200033a1e00033a6a00033ae6
00033b1800033b4400033b8a00033bcc00033c1400033c4e00033c8a0003
3d0600033e2000033e8e00033ed400033f1600033f5e00033fda00033fec
00033ffe0003403600034070000340b6000340f600034124000341f80003
42b00003439a000343ee0003442a0003474a000347c20003481a00034858
000349aa00034a9e00034b1c00034c2200034cea00034dbc00034eec0003
4fbe000350f00003519000035264000352de000353ac000353bc000353fe
0003543600035578000356c800035796000357c0000357f40003592a0003
5a6000035bd200035cf600035dfc00035ee000035fe4000360800003612a
00036242000362c60003642800036516000366540003679e0003686e0003
696200036a2a00036b7c00036c9800036d8c00036ea400036ffc00037132
00037210000372e00003739e000374da000375fe0003760e0003761e0003
762e000376cc00037770000377a0000377d00003780000037830000379d6
00037ae800037bec00037d2400037e8400037fbc0003808e000381720003
82b00003840c00038580000386ca0003889200038a1800038be000038d6a
00038e7400038f6c000390ac000391e2000392760003930a0003933e0003
9372000394e0000396540003978a0003988800039aae00039c6600039cc6
00039cf600039d2600039e2000039ef600039ff40003a06e0003a0c60003
a1180003a1720003a33c0003a54c0003a67a0003a7940003a8ba0003a9d2
0003aaf20003ac6a0003ad5e0003ae4c0003afb00003b0ce0003b2400003
b3cc0003b5140003b6320003b6f40003b7ae0003b8c40003b9d40003bb5e
0003bcb60003bddc0003beea0003bf760003c0a80003c1640003c2720003
c3460003c4180003c53c0003c6620003c7a60003c8e20003c8f20003c922
0003c9520003ca8a0003cbc40003cc800003cd3a0003ce2e0003cf120003
cfda0003d0960003d1640003d2340003d3320003d44c0003d4980003d4c8
0003d4f80003d52c0003d5600003d5700003d5800003d5b00003d5e00003
d6140003d6480003d67c0003d6b00003d6e40003d7160003d8120003d822
0003d8520003d8820003d8b60003d8ea0003d91e0003d9520003d9860003
d9ba0003d9ee0003da200003da500003da800003dab40003dae80003db1c
0003db500003db840003dbb80003dbec0003dc200003dcd80003dce80003
de340003dfba0003e10c0003e2220003e3400003e4340003e5500003e66c
0003e7880003e89e0003e9820003ea4a0003eb200003ecc20003ed160003
eda80003ee120003ee740003eef40003ef540003ef860003f0780003f0de
0003f11a0003f1980003f2000003f2660003f3160003f4e20003f5820003
f5da0003f6080003f6440003f6b00003f7660003f7d80003f8400003f8da
0003f9300003f96c0003f99c0003fa020003facc0003fb220003fb5c0003
fbb80003fc160003fcc20003fd820003fdf00003fe660003fed40003fefc
0003ff240003ff540003ff820003ffa80003ffce0003fff40004001a0004
005c0004009e000400ce000400fc00040122000401480004016e00040194
000401ba000401e0000402060004022c00040260000402ac000402e00004
032c00040352000403780004039e000403c4000403f40004042400040454
00040484000404b4000404e400040514000405440004056a000405900004
05c4000405f80004061c00040640000406660004068c000406b2000406d8
0004070e0004075a0004078a000407ba000407e0000408060004082c0004
0852000408780004089e000408e000040922000409480004096e00040994
000409ba000409ea00040a1a00040a4a00040a7a00040aa000040ac60004
0af600040b2600040b4c00040b7200040b9800040bbe00040be400040c0a
00040c3e00040c8a00040cc000040d1000040d4400040d9000040dc40004
0e1000040e4000040e7000040ea000040ed000040f0000040f2e00040f54
00040f7a00040fbc00040ffc000410220004104800041078000410a80004
10ce000410f40004112800041174000411a8000411f40004123600041278
000412a8000412d8000412fe000413240004134a00041370000413960004
13bc000413e40004140c00041432000414580004147e000414a4000414d8
000415240004155a000415aa000415da0004160a00041630000416560004
1686000416b6000416dc00041702000417320004176200041796000417ca
000417fa0004182a0004185a0004188a000418b0000418d6000418fc0004
1922000419480004197c000419b0000419e400041a1400041a4400041a74
00041aa400041ad800041b0c00041b4000041b7400041ba800041bdc0004
1c0200041c2800041c5200041c7c00041ca600041cd000041cfa00041d24
00041d5400041d8400041db600041de800041e1c00041e5000041e7a0004
1ea400041ece00041ef800041f2200041f4c00041f7c00041fac00041fe0
00042014000420480004207c000420b0000420e40004210e000421380004
21620004218c000421b6000421e00004220a000422340004226200042290
000422c2000422f400042326000423580004238a000423bc000423e60004
24100004243a000424640004248e000424b8000424e20004250c0004253c
0004256c000425a0000425d4000426080004263c00042662000426880004
26b0000426d8000427020004272c0004275c0004278c000427c0000427f4
000428280004285c00042890000428c4000428ee00042918000429420004
296c0004299c000429cc00042a0000042a3400042a6800042a9c00042ad0
00042b0400042b2a00042b5000042b7a00042ba400042bce00042bf80004
2c2000042c4800042c7800042ca800042cd600042d0600042d3600042d66
00042d9400042dc200042df200042e2200042e5200042e8200042eb20004
2ee200042f2400042f6600042faa00042fee0004303200043076000430ba
000430fe000431360004316e000431aa000431e6000432220004325e0004
329a000432d6000433160004335600043398000433da0004341c0004345e
000434a0000434e20004351e0004355a00043596000435d20004360e0004
364a00043686000436c200043704000437460004378a000437ce00043812
000438560004389a000438de000439160004394e0004398a000439c60004
3a0200043a3e00043a7800043ab200043ae200043b1200043b5400043b7a
00043bbc00043bec00043c2e00043c5e00043c8e00043cb400043cdc0004
3d0200043d5c00043d9400043dee00043e6a00043f1e00043f5e00043f82
00043fc200043ff2000440320004405a00044084000440ac000440d60004
40fc000441800004420a000442d2000443000004432e0004437a000443c6
000443f40004444000044470000444a0000444c8000444f2000445700004
45f0000446b0000446e0000447100004475e000447ac000447dc0004480c
0004483c0004488a000448ba000448ea000449140004493e000449680004
49de00044a5c00044a9e00044ae000044b0600044b4800044b7800044bba
00044be000044c0800044c2e00044c5600044c7c00044cc400044d160004
4e1c000450220004518e00045340000455300004555600045798000458a6
000459b400045c1400045d7c00045f9200045fcc0004600c0004605a0004
60ac0004614c000461c4000463360004649a00046626000466de00046822
0004692000046a0e00046b3400046b8600046bd800046c3000046c860004
6cec00046d2c00046d9c00046e1a00046e9400046ee200046f1400046f44
00046f7400046fa400046fde0004701000047064000470b8000471040004
7168000471da0004723000047286000473100004735c000473b4000473e0
0004740c0004741c0004742c000474be0004759a00047734000478420004
78520004790c000479fa00047a7600047a8600047afc00047b7a00047b8a
00047c6200047c7200047d2800047d3800047d4800047e3600047ef80004
8032000481de000482ca00048360000483f000048488000484980004856e
000485dc000485ec000486a000048794000488a4000488b4000488c40004
88d4000489aa00048a9200048b8e00048bde00048bee00048bfe00048c0e
00048d3000048d4000048de000048ed200048fde0004911a0004920c0004
929800049324000494760004951c00049560000495fc000496da00049730
0004982e000498fe00049a0200049b3800049c7a00049d4e00049e8c0004
9ef400049fcc0004a0d80004a22a0004a3860004a4c40004a6f20004a82e
0004a95e0004aa520004ab660004ac8e0004ad880004af360004afb20004
b0800004b1b20004b2a20004b3a80004b4800004b5220004b5ca0004b6ea
0004b7be0004b8860004b9380004ba540004bad80004bbec0004bd700004
be3c0004bf760004c10a0004c1c80004c2380004c2c40004c37e0004c3f6
0004c5880004c6480004c7960004c9340004c9f80004cb2c0004cb880004
cc4a0004ccec0004cdac0004ce5c0004ceea0004cfe20004d0400004d18a
0004d25a0004d3400004d3760004d39c0004d3da0004d3ea0004d3fa0004
d40a0004d41a0004d42a0004d43a0004d44a0004d45a0004d46a0004d47a
0004d48a0004d48a0004d5c20004d5d20004d6c40004d7d60004d9700004
db420004dd060004de2e0004df9a0004e1060004e1a40004e2a20004e41e
0004e5120004e5d60004e6100004e6c80004e7880004e8200004e8780004
e9d20004eac00004ebd60004ecec0004ed6c0004ede40004ee3a0004ee8e
0004eec40004ef580004efc40004f18c0004f3560004f4c60004f7200004
f8b20004fa700004fbb80004fcf80004fe7a0005001800050178000502f2
0005039c000504aa0005069400050734000507d40005092e00050a5e0005
0b9800050d0400050e7200050f9200051190000512c60005137c000514fe
00051628000517880005187e00051a2400051b7400051c4400051d460005
1e1000051f98000521080005228a000524080005255c000526c80005283c
0005292a00052a4e00052b2800052c4200052d6a00052eb800052fac0005
314000053298000533920005346c00053534000536e2000537c80005387c
000538c800053914000539a600053a8200053b0600053bc200053c1e0005
3d8800053edc00053fe0000540e2000541ec0005431a0005448600054658
000547060005481c0005494e00054a3800054b0e00054bfc00054c7e0005
4d2000054e1600054f20000550700005517c000551fc0005527c0005537a
000553d60005548a000555be000556be000557e0000558b6000559aa0005
5b4c00055c7a00055dd000055f3800055fac00055ff6000560400005608a
000560d40005612600056178000561ca0005621c00056264000562ac0005
62f40005633c0005638c000563dc0005642c0005647c000564c600056510
0005655a000565a4000565f6000566480005669a000566ec000567480005
67a40005681600056888000568e600056944000569b800056a2c00056ad8
00056c2a00056d6600056d7600056e920005703000057102000571f20005
730200057458000575760005765a00057766000578900005796000057986
000579b4000579c400057ac200057bca00057cc200057db200057ea40005
7f7e0005809c000580ac000581760005824400058282000582c200058300
000583400005839a000583f20005847c000584e20005856e000588180005
88880005895800058a3800058b0800058be200058ce800058e2800058fe6
00059124000591ee000592ee000593f6000595060005959e000596380005
9752000597be00059834000599500005998e000599ec00059a2a00059a5c
00059aa000059ae200059b1200059c3a00059d2e00059e5200059ede0005
9f4400059fd20005a0a40005a1360005a1e60005a2ae0005a3060005a3d2
0005a48e0005a5060005a5160005a5260005a5360005a5460005a6680005
a67a0005a7580005a7f80005a8f60005aa080005aa660005aaaa0005aafa
0005ab4a0005ab9a0005abea0005ac4e0005aca60005ad140005ad720005
adf60005af0c0001000009f800f2003c005a000500020010002f00550000
0281024d000400040000005303ea0000000300000000006a000000000003
00000001000a006a0000000300000002000c00740000000300000003006c
00800000000300000004001800ec0000000300000005001800bc00000003
00000006001c010400000003000000070062012000000003000000080030
000e0000000300000009008a0182000000030000000d02aa020c00010000
00000000003504b60001000000000001000504eb00010000000000020006
04f00001000000000003003604f60001000000000004000c052c00010000
00000005000c05140001000000000006000e053800010000000000070031
05460001000000000008001804bd00010000000000090045057700010000
0000000d015505bc0003000104030002000e07110003000104030004001a
071f0003000104050002000e07390003000104050004001a074700030001
04060002000c076100030001040600040018076d0003000104070002000c
07850003000104070004001807910003000104080002000c07a900030001
04080004001807b50003000104090000006a00000003000104090001000a
006a0003000104090002000c00740003000104090003006c008000030001
04090004001800ec0003000104090005001800bc0003000104090006001c
010400030001040900070062012000030001040900080030000e00030001
04090009008a0182000300010409000d02aa020c00030001040a0002000e
071100030001040a0004001a071f00030001040b0002001407cd00030001
040b0004002007e100030001040c00020010080100030001040c0004001c
081100030001040e00020008082d00030001040e00040014083500030001
04100002000e08490003000104100004001a08570003000104130002000e
08710003000104130004001a087f0003000104140002000c078500030001
04140004001807910003000104150002000e08990003000104150004001a
08a70003000104160002000e08c10003000104160004001a08cf00030001
04190002000c08e90003000104190004001808f500030001041b0002000e
090d00030001041b0004001a091b00030001041d0002000c078500030001
041d00040018079100030001041f0002000c093500030001041f00040018
09410003000104240002000e09590003000104240004001a096700030001
042a0002000e098100030001042a0004001a098f00030001042d0002000c
09a900030001042d0004001809b500030001080a0002000e071100030001
080a0004001a071f0003000108160002000e08c10003000108160004001a
08cf000300010c0a0002000e0711000300010c0a0004001a071f00030001
0c0c000200100801000300010c0c0004001c081100a90020003200300031
003100200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e0041007200690061006c004900740061006c00690063004d
006f006e006f0074007900700065003a0041007200690061006c00200052
006500670075006c006100720020004900740061006c00690063003a0056
0065007200730069006f006e00200035002e0030003800200028004d0069
00630072006f0073006f0066007400290041007200690061006c00200049
00740061006c006900630041007200690061006c002d004900740061006c
00690063004d00540041007200690061006c002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e004d006f006e006f007400790070
006500200054007900700065002000440072006100770069006e00670020
004f006600660069006300650020002d00200052006f00620069006e0020
004e006900630068006f006c00610073002c002000500061007400720069
0063006900610020005300610075006e0064006500720073002000310039
003800320059006f00750020006d00610079002000750073006500200074
00680069007300200066006f006e007400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d007300200066006f0072
0020007400680065002000700072006f006400750063007400200069006e
0020007700680069006300680020007400680069007300200066006f006e
007400200069007300200069006e0063006c0075006400650064002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002ea9203230
313120546865204d6f6e6f7479706520436f72706f726174696f6e2e2041
6c6c205269676874732052657365727665642e417269616c4974616c6963
4d6f6e6f747970653a417269616c20526567756c6172204974616c69633a
56657273696f6e20352e303820284d6963726f736f667429417269616c20
4974616c6963417269616c2d4974616c69634d54417269616c2069732061
2074726164656d61726b206f6620546865204d6f6e6f7479706520436f72
706f726174696f6e2e4d6f6e6f7479706520547970652044726177696e67
204f6666696365202d20526f62696e204e6963686f6c61732c2050617472
69636961205361756e646572732031393832596f75206d61792075736520
7468697320666f6e7420746f20646973706c617920616e64207072696e74
20636f6e74656e74206173207065726d697474656420627920746865206c
6963656e7365207465726d7320666f72207468652070726f647563742069
6e207768696368207468697320666f6e7420697320696e636c756465642e
20596f75206d6179206f6e6c792028692920656d62656420746869732066
6f6e7420696e20636f6e74656e74206173207065726d6974746564206279
2074686520656d62656464696e67207265737472696374696f6e7320696e
636c7564656420696e207468697320666f6e743b20616e64202869692920
74656d706f726172696c7920646f776e6c6f6164207468697320666f6e74
20746f2061207072696e746572206f72206f74686572206f757470757420
64657669636520746f2068656c70207072696e7420636f6e74656e742e00
430075007200730069007600610041007200690061006c00200043007500
720073006900760061006b00750072007a00ed0076006100410072006900
61006c0020006b00750072007a00ed00760061006b007500720073006900
760041007200690061006c0020006b00750072007300690076004b007500
720073006900760041007200690061006c0020004b007500720073006900
7603a003bb03ac03b303b903b10041007200690061006c002003a003bb03
ac03b303b903b1004b00750072007300690076006f006900740075004100
7200690061006c0020004b00750072007300690076006f00690074007500
4900740061006c00690071007500650041007200690061006c0020004900
740061006c006900710075006500440151006c0074004100720069006100
6c002000440151006c00740043006f0072007300690076006f0041007200
690061006c00200043006f0072007300690076006f004300750072007300
69006500660041007200690061006c002000430075007200730069006500
66004b0075007200730079007700610041007200690061006c0020004b00
75007200730079007700610049007400e1006c00690063006f0041007200
690061006c00200049007400e1006c00690063006f041a04430440044104
3804320041007200690061006c0020041a04430440044104380432004b00
750072007a00ed007600610041007200690061006c0020004b0075007200
7a00ed00760061013000740061006c0069006b0041007200690061006c00
20013000740061006c0069006b0050006f016100650076006e006f004100
7200690061006c00200050006f016100650076006e006f006e0067006800
6900ea006e00670041007200690061006c0020006e00670068006900ea00
6e006700450074007a0061006e00610041007200690061006c0020004500
74007a0061006e006100b15430bb02aa0001004002a8b2393340b802a8b3
10153240b802a8b2073340b802a9b30c12327f411102a600af02a600bf02
a600ef02a60004003002a6004f02a6005f02a60003004002a6b28f3340b8
02a6b25f3340b802a6b34e513280b802a6b34c4d3240b802a6b340483240
b802a6b30a0d3240b802a6b3093a3240b802a6b330333280b802a4b34578
3240b802a4b3323a3280b802a4b32a313240b802a4b32425327f411002a4
000100ef02a40001000f02a4002f02a4003f02a4007f02a40004004002a4
b3151d3280b802a4b309143240b802a3b31a1b320fbf02a3007f02a300ef
02a30003004002a3400a091432124f064f0702ef413701eb0001009f01eb
0001007f01eb0001005f01eb0001003f01eb0001002f01eb0001000f01eb
0001007f01ea000100ef01ea000100bf01ea000100af01ea0001002f01ea
0001003f01ea0001004f01ea0001006f01ea0001007f01ea000101ed01ed
01ec01ec01eb01eb01ea01ea4012002c01001f01102c01101f01402c0140
1f01b90109010bb2341f91b8010b4037341f2e20431f3220431f3320471f
2c20431f1f20431f7b2a481f2d2a481f212a441f37010001010009010200
0800171700000012110840b801acb7fe870dfd870d0009b8013fb22a4c1f
4109013a00ba0401001f0136001f019a001f0104b22a721fbe0101002001
9a001f0100002002abb21ffb2db80156b21ffa1fb80801b21ff91fb80201
40131ff81fe41ff71fbb1ff51f4a1fc92aab1fb92db8019ab21fb81fb804
01b21fa02ab802ab400f1f8b1f521f7b2ae41f781f6c1f6e20b80401b21f
6c21b80401400b1f632aab1f5a2a5a1f5820b802abb21f4e20b80156b21f
471fb8019ab61f452aab1f442ab80101b61f401f891f332db80401b21f32
21b80401b61f311f721f2e1fb8019ab21f2c1fb80401b21f291fb80801b2
1f281fb80801b61f271f6c1f2221b8040140451f550d090d093790dc0790
a80790a607907e07904107903b07903607903507903007902f07902b0790
2507901d071408120810080e080c080a080808060804080208000814b8ff
e0402b000001001406100000010006040000010004100000010010020000
01000200000001000002010802004a00b013034b024b5342014bb0c06300
4b6220b0f65323b8010a515ab005234201b0124b004b544218b0382b4bb8
07ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801
19b101018e851bb0124358b900010119858d1bb9000101ff858d59590016
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b2b2b4b5079b9001f0158b3071f3d072b2b4b5379b900900158b307903d
072b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58
b901ae01ac4544b901ad01ac45445958b9032c01ae455258b901ae032c44
59594bb8019a53205c58b9003f01ae4544b901ae01ae45445958b908d600
3f455258b9003f08d64459594bb8040153205c58b9002301ae4544b90020
01ae45445958b916200023455258b9002316204459594bb8040153205c58
b9001e01ad4544b9002a01ad45445958b917e0001e455258b9001e17e044
59594bb8040153205c58b1ba234544b1232345445958b9162000ba455258
b900ba16204459594bb03c53205c58b11f1f4544b1211f45445958b90102
001f455258b9001f01024459594bb04653205c58b11f1f4544b12d1f4544
5958b9012e001f455258b9001f012e4459594bb8030153205c58b11f1f45
44b11f1f45445958b90d20001f455258b9001f0d204459592b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b65422b2b45695342014b5058b108004259435c58b108004259161070
3eb0124358b90d193ea51bba00d203eb000b2b59b00a2342b00b2342003f
3f182b103c012f060cb0062342b0072342b0124358b93b21187e1bba0400
01a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400040000
0b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59
b0102342b0112342002b2b2b2b2b2b2b2b2b2b2b74747575757500184569
444569444569444569447373737373737373757373737373737374004bb0
2a534bb03f515a58b1070745b040604459004bb030534bb03f515a58b10b
0b45b8ffc0604459004bb02e534bb03c515a58b1030345b040604459004b
b02e534bb03c515a58b1090945b8ffc0604459435c58b64f2c014f1f0137
2b7474592b732b2b2b7373742b2b2b2b2b2b2b2b2b2b2b2b74732b2b2b2b
742b000000>
[16173 16065 15681 16357 15501 16301 16041 16313 15577 16241 16101 16289 16325
16325 16309 16293 16337 16369 15989 16357 15805 16305 17461 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 6942 36 <0002ffd7000004ef05ba0007000e00a04046080606020608080705090a0c
0406080e0c0c0706080f0509100c970c0102200100001e070c1407070c02
0c04041e03021403030201070f04030203100cfb0201020908210506b801
bb400e07070404030300080ca90f8382182b1910f400183f3c103c103c10
f43cfd3c3f3ced01111739113939872e2b877dc4872e182b7d10c42b1112
393912393987100ec405c4c4870ec405c4c407103c8710c4313023013313
230321030121032627060729033fe7f2be47fdafeb013f01e53921083260
05bafa4601a6fe5a023d0170db927ead>Arial-ItalicMT AddT42Char 
1 7168 37 <000300590000053d05ba0012001c002800d5404726201011341520101134
39226915c71cc71d0413281d1c282615130b0524290b13281c1d1d1e0001
140000011413212828272700041b1c2101602804021e1d2128120008172a
08b80296400d0e2a00244f2460248024042424b801d5401e1d0901010009
1c1c091d1d7b090f002f00020000462909011000174651182b2b2b3c012b
7a4e10f001182f5d2b7a4df101182f2b3c012f2b103c012f2b7a10f20118
2f5dfdf4ed003f3c2bfd003c3f2bf4fd003c1112392f3c10fd3c87052e2b
7d10c4001112390111121739073c3c3130015d2b2b33012132171e021514
06071616151406062301213236353426262321032132373e023534262321
59013301c67c3c62874a858977768be58dfeae0129d5bb3a6186fec8ed01
4e852e5d744281b5fe8c05ba0a1155935979b830279d6979de7903488882
3e5a29fb9309104d7e45676b>Arial-ItalicMT AddT42Char 
1 7510 38 <000100baffe705d805d3001b009fb396080113b8ffe0b30f113414b8ffe0
400e0e1134102010113411200d113418b8ffe040310b1134041814180226
143f104603781004100e1416151910120f390e920b013990000100000412
2d0b03192d0409007b01b8026140140f7b0e162a3007012f070107341c0e
431d3443182b4e10e610f45d714ded10edf4ed003fed3fed12392f5de410
fdf41139123901123912393130015d5d2b2b2b2b2b005d01170600232000
11101336213204170726262320070611141633323604d3c25cfea0dbfef5
fec7eed4013be9012117b71db58ffef3a690deb298f602041bfefefc0146
0130018c0103e7fad3119f9defcefee5e2eec600>Arial-ItalicMT AddT42Char 
1 7770 39 <0002005b000005b205ba000f00200092404a17200b11341c200b11340014
20143014b014040f010f200209010b1c1f011b1c1f202f012f2007470501
2010101e0001140000011f2021010128020213391021280f00081a2a0851
2210b8010740110f002f00020046217001010110004651182b2f2b3c5d01
4e10f45d4ded4e10f64ded003f3c2bfd00e43f2b3c10fd003c05872e2b7d
10c43130005d015d5d712b2b33012132171e021514020606070623253332
37363736373636353426272623215b013201ba9f5478aa566badbd81628f
fed7e89d7a4c36473a4c5b7c604796fefd05ba171f9fee94b1fedddd7d1e
17a61d12232d4a62fba0b2bf1f17>Arial-ItalicMT AddT42Char 
1 8024 40 <0001005c000005b105ba000b00c4403d2b0229033a0240076202050a0302
020b05080904080d0c0409091e0001140000010605210808070700030421
280201020a0921280b000807c200060106b8025fb70505040903c20202b8
025f401d0904040909097b00090101090f002f00020000460c0901100017
466b182b2b2b3c012b7a4e10f001182f5d2b3c012f2b7a4d10f101182f2b
3c012f2b7af001182fe42b103c012ff45de4003f3c2bfd003c3f3c2bfd00
3c12392f3c10fd3c87052e2b7d10c401111239073c3c8710c4c43130015d
3301210721032107210321075c0133042223fca260034823fcb86a039b23
05baa7fe38a7fe02a600>Arial-ItalicMT AddT42Char 
1 8274 41 <0001005d0000054805ba000900ab40361f011f041b080333033606ff02fb
06040508090405080b0a0409091e00011400000106052108080707000304
21280201020928000807b80175b310060106b801c2b60505100403c202b8
01c24018040410097b74010101100f002f000200460a011000466b182b2f
2b3c014e10f45d2b3c5d014dfd2b3c0110f4e4102b3c0110e45de4003f2b
3c003f3c2bfd003c12392f3c10fd3c05872e2b7d10c40111123939073c3c
3130015d5d330121072103210721035d013203b923fd0b61030323fcfd8b
05baa7fe2da7fd67>Arial-ItalicMT AddT42Char 
1 8492 42 <000100c7ffe7062105d3002000ccb9001effe040110e1134471f011e2a0e
113415200e113418b8ffe8b30b11341cb8ffe040410b11340b141b14141c
3b154610050001221a031f001d28201f1f1e0302140303021f1e13391292
0e202800210228010106162d0e031d2d0609132a120209021003b8013e40
17221a2a300a012f0a010a3403212802100303210a3451182b2b103c012f
2b3c2b10c0014ef45d714ded10f62b3c2b10d401ed003fed3fed12392f2b
3c00fd2b3c0010fde408872e2b057d10c42b111239390111123939313001
5d2b2b2b2b005d2b01372103060423202726111012243332161617072626
232204021514163332371303472302827d79feca96fec09e85e90163d99c
f8841dc01fc3999ffeeca5dac0bfdc420242a6fdab4c60c1a30100010801
b1cf71bd981597a1adfea3dedde27e013b00>Arial-ItalicMT AddT42Char 
1 8810 43 <000100560000060805ba000b00df404a0409080805030a0b020a09040304
0d0c020b0b1e0001140000010607071e080514080805090a0403210a0a02
0b06050502022801020b0808070728000806060907077b08090505090808
b8028a40230d090202090b0b7b00090101090f002f00020000460c090100
0508100017081746ac182b2b2b2b103c103c012b7a10f201182f5d2b3c01
2f2b7a10f101182f2b3c012f2b7a10f001182f2b3c012f2b7a10f101182f
2b3c012f003f2b3c103c103c003f2b3c103c103c001112392ffd3c103c87
052e2b7d10c4872e182b7d10c40111121739073c3c07103c3c3130330133
032113330123132103560133c37f02f87fc4fecec490fd099105bafd9f02
61fa4602b3fd4d00>Arial-ItalicMT AddT42Char 
1 9088 44 <000100750000026b05ba00030094400910050109013f050205b8ffc0b326
2a3405b8ffc0b318233405b8ffc040271415340203031e00011400000102
280102032800080202090303a00009010109004012233f0000b8ffc04011
1a2234100001009e0409011000179e97182b2b2b3c012b7a4e10f05d2b01
182f2b2b3c012f2b7a4d10f101182f2b3c012f003f2b3c003f2b3c87052e
2b7d10c431302b2b2b015d5d33013301750133c3fece05bafa46>Arial-ItalicMT AddT42Char 
1 9264 45 <00010044ffe7044905ba001500a44024761001300f400f500f600f720fa8
0db80d070014010b030d0e0e1e0b0c140b0b0c016000b8028c4019060c02
062d11090d0d090e0e2a0b09600c700c020c0c090b0bb801c0401b09032a
2f143f144f1490140414560b16280c100b170b160a4669182b2b103c2b2b
3c2b10c0014ef45d4dfd2b7af201182f2b3c012f5d2b7a10f101182f2b3c
012f003fed3f10f4e4870e2e2b057d10c40111123912393130015d5d1337
061514163332363736371333030606232226353453b610655a41631f1819
dac3df2fdcabb6ba01ab0d552851613b3e2f7a040ffbd1e2c2a89843>Arial-ItalicMT AddT42Char 
1 9502 46 <0001005b000005ee05ba000b00f84057120003011f011f021b031b060409
09080a0a050303040a0a050b02020b0b1e00011400000103040302041e05
0a1405050a0706061e09081409090806050a09080703050d0c0a0903030b
0504022801020b280807000805b80137400d0d72010101100f002f000200
46b9013700182b2f5d2b3c5d014e10e6003f3c3c2b3c003f2b3c003c3c12
1739011112173908874d2e2b057d10c4872e182b087d10c405872e182b7d
10c407083c083c0710083cb10602435458400b06180c113409200c113403
b8ffd0400e0b11340618122834091812283403b8ffe0b2122834002b2b2b
2b2b2b593130015d0072435c58b40428121834012b593301330301210101
230101035b0132c493031c0114fd5701f3dbfe59fecd6405bafd3e02c2fd
abfc9b02e7fef5fe2400>Arial-ItalicMT AddT42Char 
1 9812 47 <000100520000043205ba0005007540180203031e00011400000102280102
0403212805000805c204b80129401b0702020903037b00090101090f002f
000200004606090110001746b9012900182b2b2b3c012b7a4e10f001182f
5d2b3c012f2b7a4d10f101182f2b3c012f4e10f64de4003f3c2bfd003c3f
2b3c87052e2b7d10c43130330133012107520132c4fef102f92305bafaec
a600>Arial-ItalicMT AddT42Char 
1 9964 48 <0001005a000006fa05ba0018024d403f9f1a013603370737093610470747
094610491259035b126c036d0469086b09690c690d6f1269136f1a79127f
1a890385118a12a912d812df1a1b9f1adf1a02b10602435458b40a001a19
05b8ffe8b30c0d3405b8ffd0401a0e11340e100b1c3415400b1c3405150e
0300010b120008080102003f3c3f3c3c111217392b2b2b2b01111239391b
b9000fffe0b20e2006bcffc00005ffc00004ffc040230304050502060708
08050c0d0e0e0b0f1011110e13141515121617181815880e080920b8ff65
b305121120b801284052150102200205051e12151412050812150805051e
110e14110502110e090a0a1e0b0e140b0b0e0100001e1815141818150501
18155a02090e7b082808020201021812281211110b0b0a0a28000809090a
0908b80175b5050101000902b8013b40100500007b180915150918189305
090e0eb8ffc0b3292b340eb8ffc0b31525340eb8ffc0403c0e10340e2f0b
9f0baf0b036f0b7f0bdf0b030b2f1a3f1a021aca0a090a0a7b090b0b9309
20059005026005010505191a0e0b1518100b17181746ac182b2b2b2b103c
103c01191112392f5d712b7af001182f2b7ae101182f2b10f2717a105d71
c12b2b2b01192f2b7a10f001182f2b7ac001192f2b7a10e101182f1910e4
2b103c01182f1910e42b103c01182f003f2b3c103c00103c103c2b103c00
3f3c103c2b10ed3c10ed0011123987052e2b7d10c4872e182b7d10c48708
2e182b057d10c487082e182b057d10c42b2b2b87100ec4c487100ec4c487
100ec4c487100ec4c487100ec4c487100ec4c40038383801383859313001
715d72330133131617363701330123133613060701230326270607035a01
32f1941d093d8f0202f5fecec19935633f5dfddebd9314091918c305bafc
4abbac94fd038cfa4602c9f701338fa5fc4103ac81acc171fc59>Arial-ItalicMT AddT42Char 
1 10650 49 <000100640000060e05ba00130163406974037605790e03390e590e660569
0e801005270c370c6411760a760b8702890d0708090a0a070e0f10100d11
1213101013100d131e0001140000010c0b0b1e0a07140a0a0702100d0d1e
0702140707020b0a0a0228020102075a0c130d105a02280d0c0c2800080d
0db801fa401a0c0902027b01090b0b0c090a0a07090c0cfb090740078007
0207b8018640290009101013090101000913137b090f002f000200004609
07142801000a07100017071707140a46ac182b2b103c2b2b2b103c103c2b
10c0012b7a4ef001182f5d2b7a4de101182f2b103c012f2b7a10c001192f
2b7a10f15d01192f2b7ae101182f2b7a10c001182f2b103c012f2b7a10e1
01182f2b7a10e201182f003f2b3c00103c2b10ed103c10ed003f3c2b103c
103c87052e2b877dc4872e182b7d10c4872e182b087d10c4870ec4c48710
0ec4c487100ec4c4b10602435458b510200a0c3407b8ffe0b20a0c34002b
2b593130015d005d5d330133131617161736371333012301262706070364
0133bef7714226321b29b4bffecec2fe9461360f2bba05bafddafcac64aa
b9c5035efa46034fe0ab8fd0fc85>Arial-ItalicMT AddT42Char 
1 11084 50 <000200bbffe7062e05d30010001f0096401a2702280b0279138414021820
0b113417200b11341c200b113413b8ffe0b30b10341eb8ffe0401e0b1134
0613091c16131b1c04280148185713031d2d0303152d0d091a2a06b8ffc0
b324383406b8ffc0b31b223406b8ffc04017161734800601065121112a30
00012f00010034203451182b4e10f45d714ded4e10f65d2b2b2b4ded003f
ed3fed3130015d5d2b2b2b2b2b5d005d1310002120001114070606070623
222402371416163332363612353402232200bb01c50143011201595741c6
7196a8b0fedf95c16bd47571cca15df5b4e6fea00266018801e5fe9bfed4
d6b789c73648a8012da081d87a6bbf011787db0104fe7700>Arial-ItalicMT AddT42Char 
1 11348 51 <000200580000059505ba000f001a009b4038a804a713022c133a13781389
12040e101a0f13100e10151b1302111a0f0f1e0001140000011110210d0e
0e00191a21280201020f2800081ab801bf4022152a2f063f065006600670
0680060606691c1f0174010201100f002f0002004669182b2f5d2b3c5d01
4e10f65d4dfde6003f2b3c003f3c2bfd003c12392f3cfd3c05872e2b7d10
c40011123901111239391139073c3c3130015d005d33012132161615140e
020706232103132132363635342626232158013302649f9f684a7174428d
90fe917c9f0143bcb06a386691fe8805ba49b16e5bbc7a3e0f21fdad02f9
51a65d485b2b>Arial-ItalicMT AddT42Char 
1 11594 52 <000200bdff58063005d30018002e00f3401459296905661a841a04361930
1a021a200e113421b8ffe0b310113421b8ffe040090e11341e200b113425
b8ffe040440b103406251b1a1b1e1625802605280e291127177f29fa0005
2600391139297b1a7621e900063c003a023c19452b042d2c2b0323192903
02161c040300051929272c2d2bb80135401127032d0239071f2d1303272d
07091c2a16b8ffc0b324383416b8ffc0b31b223416b8ffc0401716173480
1601165130232a300c012f0c010c342f3451182b4e10f45d714ded4e10f6
5d2b2b2b4dfd003fed3fed10f4ed10f6ed11393912391239011112393912
39111739313001715d5d5d2b2b2b2b2b00715d2516170726270623222426
023534373636373633200011140225361235340223220402151417163332
37262737161604d64a7e57856a95876cfefeae63493dc37499b201120159
b8fee67996f4b194feeea49a78896d575b6047416976585274577c4652a6
01059ebfaf90d1394bfe9bfed4ddfe8b045e0149b2de0105adfeb2c5f787
692253327a1c4d00>Arial-ItalicMT AddT42Char 
1 11992 53 <00020060000005d705ba0017002400ef408121201011341d200c1134570b
010d0e0e0b1012120f161824171b18161309051f2513162417171e000114
000001120f0f1e0e0b140e0e0b120f0b03250e261f0b12170986161b6018
21161615150023242128020102170f280f0e0e000824240917177b000901
01090f00010000b525091f2a2006300602064326011000178f43182b2b2b
3c014e10f6714ded2b7a10f201182f5d2b3c012f2b7a10f101182f2b3c01
2f003f3c103c2b103c003f3c2bfd003c12392f3c10fde410e51239390111
1239121739872e2b0e7d10c487052e182b7d10c40012390111121739073c
3c87100ec487100ec43130015d2b2b330121321616151406051617161713
230326272626232303132132373e023534262623216001330267b6bc6bea
fefb50295c3870db693949326875e488a9010fbc396f8e4e3a5e71fe2205
ba3da880b3ec233b39818afeec0111946c4b2ffd75032a050b4e844c405f
2200>Arial-ItalicMT AddT42Char 
1 12354 54 <00010090ffe7055f05d3003700d9b9002cffe0b30d11342ab8ffe040180d
11340c200c1134742e8229023604360838210309360104b8ffe040340d11
3421200d113407200d1134252f362d940b030f0d0b2a2c2e0616351d391c
0039011d1d16010135232d1603062d3509017b00b8013b400d272a201230
12020f1270120212b80233b338092a31b8ffc0400a0c113431c71d2a1a60
1cb8ffc04010222834201c301c022f1cd01ce01c031cb8028bb339c84318
2b10f55d712bf4fdf42bed10f65d71edf4ed003fed3fed12392f11392f10
e410e4111217393130015d2b2b2b5d005d5d2b2b2b133707141616333236
35342726272627262635343636333216161514070734272e022322070615
1416171617161716161514060423222490c0024eb47cb0b93132dfad3f63
5e7cef96b3f66f01bd0b1454935ba05944384934c39e3c505691ff00a5f9
fec501da1233558d4d9a63453938604b2841996271b66078c85b09150f3e
233d543348375b3655291d56462835976077c96ed900>Arial-ItalicMT AddT42Char 
1 12736 55 <000100ff000005a405ba0007009f40361b02012000200736030302030908
01060302280607071e000114000001050221040302072800080606090707
7b0009011f0101010900b8ffc0b321223400b8ffc0400c1c1e342f003000
b000030000b801c5b60809011000178fb9010200182b2b2b3c012b7a10f2
01182f5d2b2b2b3c5d012f2b7a10f101182f2b3c012f003f2b3c003f3cfd
3c87052e2b7d10c42b1112393901111239393130015d5d21012137210721
0101d1010ffe1f23048223fe23fef10513a7a7faed00>Arial-ItalicMT AddT42Char 
1 12938 56 <000100c6ffe6060905ba00180096403209100911342710201a5b15691577
017815060d0e0e1e0b0c140b0b0c0104041e1600141616000d0c01000228
072d1209280db8013bb50e2a860c010cb8013b4009400b500b02000b010b
b80267400e1a01a2042a86000170000100a216b801fab3193482182b10f6
e45d71fde410f45d71e471fde42b3f00ed2b3f3c3c3c870e2e2b057d10c4
870e2e182b057d10c43130015d2b01330306151416333236363713330306
0204232226263534370196c4bc17ba8d70c1702da9c4b32e96fef6b0a6f3
792905bafc7b7036769067c8db0327fca4dcfeff9b6ec27b4dbc>Arial-ItalicMT AddT42Char 
1 13174 57 <000100fe0000060e05ba000a009c40134401440254015402040304050502
0607080805b8ff6f402b05000a20090a0a210508140505080001011e0205
14020205050a090808020201020a0008097b08400ac308ba0117000001f8
400c0520017b4002a205bb0b208fb9010200182b191a10fd18f41aed191a
10ed18e419ed181a10ed003f3c3f3c103c103c123987052e2b7d10c4872e
182b7d10c42b87100ec4c487100ec4c43130015d21013313161736370133
010218fee6bdaa2f0e5c3b020bcafcdc05bafc96ee92bc6e03c0fa46>Arial-ItalicMT AddT42Char 
1 13382 58 <000101000000087e05ba001e015c40182817014800491958005919690069
1979007919880089190ab10602435458b71701201f86090110b8ffc0b30b
283409b8ffe840150b28341b400b2834091b10030001180008150c010200
3f3c3c3f3c111217392b2b2b5d01111239391b404d191a1b1b1808070605
04030202090f0e0d0d100b0c0c0912141515101d1e0c1b1e1e1e090c1409
090c171015151e1617141616171e1b091720101b1009031e16150d0c0202
1e181708157b4016b8017db2102017b8013eb31821100cb8013eb50d211b
021e01b801d2b300210920ba0168001001d2b51bbb09931f8fb901400018
2b10f4fdfde410edfded10fde610fde61a1910fd1a18ed003f3c3c3f3c3c
3c3c12173901111239111239872e2b877dc4872e182b877dc4100ec48710
0ec4c487100ec487100ec4c487100ec4c4c4c4c4c487100ec4c44bb01953
58b9001bffe0b6102009201b1009007d2f2f7c2f0138383859593130015d
005d21033313161716151407363701331316173637363701330123032627
060701015a5ac722030702017a3601beca310803122e492301a2c8fd16d2
3107043d29fe0405bafd2b34e6401a1152fa66034cfca793cf3365a34603
3afa46037872a68b4dfc4800>Arial-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007004ab10201bb012e000600070237b200
0504b8012eb403000a0704b8012eb5010019080605bb012e000200030143
b3095bbe182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c3130
211121112521112101000400fc2003c0fc400500fb002004c000>Arial-ItalicMT AddT42Char 
Arial-ItalicMT /CharStrings get begin
/A 36 def
/B 37 def
/C 38 def
/D 39 def
/E 40 def
/F 41 def
/G 42 def
/H 43 def
/I 44 def
/J 45 def
/K 46 def
/L 47 def
/M 48 def
/N 49 def
/O 50 def
/P 51 def
/Q 52 def
/R 53 def
/S 54 def
/T 55 def
/U 56 def
/V 57 def
/W 58 def
end
Arial-ItalicMT /Encoding get
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
pop
end
%ADOEndSubsetFont
/AYCWLA+Arial-ItalicMT /Arial-ItalicMT findfont ct_VMDictPut
/AYCWLA+Arial-ItalicMT*1 
[65{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
168{/.notdef}rp]
AYCWLA+Arial-ItalicMT nf
AYCWLA+Arial-ItalicMT*1 [12 0 0 -12 0 0 ]msf
280.97 486.87 mo
(B)sh
280.97 465.78 mo
(A)sh
280.97 444.69 mo
(C)sh
280.97 423.6 mo
(D)sh
280.97 402.51 mo
(E)sh
280.97 381.42 mo
(F)sh
280.97 360.33 mo
(O)sh
280.97 339.24 mo
(Q)sh
280.97 318.14 mo
(R)sh
280.97 297.05 mo
(S)sh
280.97 275.96 mo
(W)sh
280.97 254.87 mo
(U)sh
280.97 233.78 mo
(V)sh
280.97 212.69 mo
(P)sh
280.97 191.6 mo
(T)sh
280.97 170.51 mo
(I)sh
280.97 149.42 mo
(N)sh
280.97 128.33 mo
(M)sh
280.97 107.24 mo
(L)sh
280.97 86.14 mo
(J)sh
280.97 65.05 mo
(K)sh
280.97 43.96 mo
(G)sh
280.97 22.87 mo
(H)sh
/AYCWLA+Arial-ItalicMT*1 uf
/AYCWLA+Arial-ItalicMT uf
/Arial-ItalicMT uf
/AYCWKZ+AdobePiStd*1 uf
/AYCWKZ+AdobePiStd uf
/AdobePiStd uf
[2.25 3.75 ] 0 dsh
223.03 462.91 mo
280.97 462.91 li
@
223.03 484 mo
280.97 484 li
@
223.03 441.82 mo
280.97 441.82 li
@
223.03 420.73 mo
280.97 420.73 li
@
223.03 399.64 mo
280.97 399.64 li
@
223.03 378.55 mo
280.97 378.55 li
@
223.03 41.09 mo
280.97 41.09 li
@
223.03 20 mo
280.97 20 li
@
223.03 125.45 mo
280.97 167.64 li
@
223.03 104.36 mo
280.97 83.27 li
@
223.03 62.18 mo
280.97 62.18 li
@
223.03 83.27 mo
280.97 104.36 li
@
223.03 146.55 mo
280.97 125.45 li
@
223.03 167.64 mo
280.97 146.55 li
@
223.03 357.45 mo
280.97 357.45 li
@
223.03 336.36 mo
280.97 209.82 li
@
223.03 315.27 mo
280.97 336.36 li
@
223.03 294.18 mo
280.97 315.27 li
@
223.03 273.09 mo
280.97 294.18 li
@
223.03 188.73 mo
280.97 188.73 li
@
223.03 209.82 mo
280.97 252 li
@
223.03 230.91 mo
280.97 230.91 li
@
223.03 252 mo
280.97 273.09 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
